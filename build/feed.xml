<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jesmo Drazik Blog</title>
    <atom:link href="http://jesmodrazik.fr/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://jesmodrazik.fr</link>
    <description>Développeur web pour l'agence de production Wandi</description>
    <pubDate>Wed, 28 Jun 2017 02:00:00 +0200</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>fr</language>
    <item>
      <title>webpack</title>
      <link>http://jesmodrazik.fr/articles/webpack/</link>
      <pubDate>Wed, 28 Jun 2017 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://jesmodrazik.fr/articles/webpack/</guid>
      <author></author>
      <description>&lt;h2 id=&quot;qu-est-ce-que-webpack-&quot;&gt;Qu’est-ce que webpack ?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack&lt;/a&gt; est un &lt;em&gt;module bundler&lt;/em&gt;. Il construit le
graphe de dépendances d’une application JS afin de les regrouper dans un ou
plusieurs &lt;em&gt;bundle(s)&lt;/em&gt; qui pourront être exécutés dans un navigateur web. Il nous
permet donc d’écrire du code modulaire, bien que les navigateurs n’implémentent
pour la plupart pas encore les modules ES2015. Il fait donc la même chose que
&lt;a href=&quot;http://browserify.org/&quot;&gt;browserify&lt;/a&gt;. Toutefois, webpack est très différent de
browserify, de par sa philosophie bien particulière.&lt;/p&gt;
&lt;h2 id=&quot;ici-tout-est-module&quot;&gt;Ici, tout est module&lt;/h2&gt;
&lt;p&gt;La philosophie de webpack est de traiter n’importe quelle dépendance d’une
application comme un module. Ainsi, un fichier JS est un module, un fichier CSS
est un module, une image est un module… Tous ces modules sont consommables
directement dans le code JS.&lt;/p&gt;
&lt;p&gt;On peut donc faire les choses suivantes avec webpack :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Importer un module JS, classique&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; add &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;./add.js&quot;&lt;/span&gt;;

&lt;span class=&quot;comment&quot;&gt;// Importer un fichier CSS&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; styles &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;./styles.css&quot;&lt;/span&gt;;

&lt;span class=&quot;comment&quot;&gt;// Importer une image&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; logo &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;./logo.png&quot;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Webpack est capable de gérer à peu près n’importe quel type de fichier, grâce à
son systême de &lt;em&gt;loaders&lt;/em&gt;. À un type de fichier correspond un (ou plusieurs)
&lt;em&gt;loader(s)&lt;/em&gt;, qui a pour but de dire à webpack comment faire pour charger ce type
de fichier.&lt;/p&gt;
&lt;h2 id=&quot;installer-webpack&quot;&gt;Installer webpack&lt;/h2&gt;
&lt;p&gt;Rien de plus simple, ça se fait évidemment via &lt;code&gt;npm&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install --save-dev webpack
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Une fois installé, le binaire de webpack est disponible dans
&lt;code&gt;./node_modules/.bin/webpack&lt;/code&gt;. Pour éviter d’avoir à taper le chemin complet à
chaque fois, on peut écrire un script npm dans notre &lt;code&gt;package.json&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-json&quot;&gt;&amp;quot;scripts&amp;quot;: {
  &amp;quot;build&amp;quot;: &amp;quot;webpack&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;De cette manière, il suffira de taper &lt;code&gt;npm run build&lt;/code&gt;, plutôt que
&lt;code&gt;./node_modules/.bin/webpack&lt;/code&gt; pour lancer webpack.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Il est aussi possible
d’&lt;a href=&quot;https://webpack.js.org/guides/installation/#global-installation&quot;&gt;installer webpack en global&lt;/a&gt;,
mais ce n’est pas conseillé.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Si vous voulez en savoir plus à propos des scripts npm, vous pouvez aller voir
l’article
&lt;a href=&quot;http://jesmodrazik.fr/articles/ne-plus-installer-gulp-en-dependance-globale/&quot;&gt;“ne plus installer gulp en dépendance globale”&lt;/a&gt;,
qui traite de ce sujet.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;configurer-webpack&quot;&gt;Configurer webpack&lt;/h2&gt;
&lt;p&gt;Pour faire fonctionner webpack, on va créer un fichier de configuration, nommé
&lt;code&gt;webpack.config.js&lt;/code&gt;. Le minimum requis est un point d’entrée et un point de
sortie :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; path = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;path&quot;&lt;/span&gt;);

&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = {
  &lt;span class=&quot;comment&quot;&gt;// Notre fichier source&lt;/span&gt;
  entry: &lt;span class=&quot;string&quot;&gt;&quot;./assets/js/app.js&quot;&lt;/span&gt;,
  &lt;span class=&quot;attr&quot;&gt;output&lt;/span&gt;: {
    &lt;span class=&quot;comment&quot;&gt;// le chemin vers le bundle que webpack va générer&lt;/span&gt;
    path: path.resolve(__dirname, &lt;span class=&quot;string&quot;&gt;&quot;web/assets&quot;&lt;/span&gt;),
    &lt;span class=&quot;comment&quot;&gt;// le nom du bundle&lt;/span&gt;
    filename: &lt;span class=&quot;string&quot;&gt;&quot;bundle.js&quot;&lt;/span&gt;,
  },
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Avec cette configuration minimale, webpack est capable de gérer nos dépendances
JS. Donc, si on a la configuration suivante :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// assets/js/add.js&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; add = &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;a, b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; a + b;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// assets/js/app.js&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; add &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;./add.js&quot;&lt;/span&gt;;

&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(add(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;webpack générera un seul fichier, regroupant &lt;code&gt;add.js&lt;/code&gt; et &lt;code&gt;app.js&lt;/code&gt;, et qui une
fois importé dans une page web, affichera &lt;code&gt;3&lt;/code&gt; dans la console.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note : webpack supporte par défaut la syntaxe des modules ES2015. Toutefois,
c’est le seul aspect de cette syntaxe qu’il transpile directement. Pour le
reste, il faut utiliser babel.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;les-loaders&quot;&gt;Les loaders&lt;/h2&gt;
&lt;p&gt;webpack met à disposition une API permettant de lui dire ce qu’il doit faire
lorsqu’il charge un module : les &lt;em&gt;loaders&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Par exemple, il est possible de lui dire “tiens, webpack, lorsque tu charges un
fichier JS, alors passe le dans babel pour récupérer le code transpilé avant de
créer ton bundle”. Pour ça, il faut d’abord installer
&lt;a href=&quot;https://www.npmjs.com/package/babel-loader&quot;&gt;&lt;code&gt;babel-loader&lt;/code&gt;&lt;/a&gt; et
&lt;a href=&quot;https://www.npmjs.com/package/babel-core&quot;&gt;&lt;code&gt;babel-core&lt;/code&gt;&lt;/a&gt;. De plus, nous allons
aussi utiliser le preset
&lt;a href=&quot;https://www.npmjs.com/package/babel-preset-env&quot;&gt;&lt;code&gt;env&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install --save-dev babel-loader babel-core babel-preset-env
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Il faut ensuite modifier notre configuration, pour y ajouter le loader et le
configurer :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; path = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;path&quot;&lt;/span&gt;);

&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = {
  &lt;span class=&quot;attr&quot;&gt;entry&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;./assets/js/app.js&quot;&lt;/span&gt;,
  &lt;span class=&quot;attr&quot;&gt;output&lt;/span&gt;: {
    &lt;span class=&quot;attr&quot;&gt;path&lt;/span&gt;: path.resolve(__dirname, &lt;span class=&quot;string&quot;&gt;&quot;web/assets&quot;&lt;/span&gt;),
    &lt;span class=&quot;attr&quot;&gt;filename&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;bundle.js&quot;&lt;/span&gt;,
  },
  &lt;span class=&quot;attr&quot;&gt;module&lt;/span&gt;: {
    &lt;span class=&quot;attr&quot;&gt;rules&lt;/span&gt;: [
      {
        &lt;span class=&quot;comment&quot;&gt;// le test se fait sur le nom des fichiers qu'on importe&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;// ici, on veut que cette règle s'applique à tous les fichiers dont&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;// le nom se termine par &quot;.js&quot;&lt;/span&gt;
        test: &lt;span class=&quot;regexp&quot;&gt;/\.js$/&lt;/span&gt;,
        &lt;span class=&quot;comment&quot;&gt;// on demande à webpack de n'appliquer cette règle qu'aux fichiers qui&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;// se trouvent dans ./assets/js. Sinon, il l'appliquerait à tous les&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;// fichiers JS, mêmes ceux de node_modules par exemple&lt;/span&gt;
        include: path.join(__dirname, &lt;span class=&quot;string&quot;&gt;&quot;assets&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;js&quot;&lt;/span&gt;),
        &lt;span class=&quot;comment&quot;&gt;// si le test passe, alors on veut appliquer le babel-loader&lt;/span&gt;
        loader: &lt;span class=&quot;string&quot;&gt;&quot;babel-loader&quot;&lt;/span&gt;,
        &lt;span class=&quot;comment&quot;&gt;// on passe des options au loader. Ici, on veut utiliser le preset &quot;env&quot;&lt;/span&gt;
        options: {
          &lt;span class=&quot;attr&quot;&gt;presets&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&quot;env&quot;&lt;/span&gt;],
        },
      },
    ],
  },
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lorsqu’il tombera sur un nouveau module à importer, webpack le confrontera à
toutes les règles que nous avons définies, et celles pour lesquelles le test est
satisfait lui seront appliquées.&lt;/p&gt;
&lt;h2 id=&quot;importer-autre-chose-que-du-js&quot;&gt;Importer autre chose que du JS&lt;/h2&gt;
&lt;p&gt;Le graphe de dépendance créé par webpack permet de n’ajouter au bundle que les
modules effectivements importés dans notre application. Utiliser ce mécanisme
pour d’autres types de ressources serait très intéressant. Et justement, le
système de loaders va nous permettre d’importer n’importe quel autre type de
fichier directement dans notre JS, et de le consommer comme étant un module de
notre application.&lt;/p&gt;
&lt;p&gt;Prenons le cas d’un fichier CSS simple. Nous avons un fichier
&lt;code&gt;assets/css/app.css&lt;/code&gt; contenant l’ensemble du style de notre site. Nous voulons
que webpack ajoute celui-ci à son graphe de dépendances afin qu’il fasse partie
de notre bundle final. On l’importe donc dans notre fichier &lt;code&gt;app.js&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// assets/js/app.js&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; styles &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;../css/app.css&quot;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Puis on demande à webpack de créer notre bundle avec &lt;code&gt;npm run build&lt;/code&gt;. Et on se
prend l’erreur suivante :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ERROR in ./assets/css/app.css
Module parse failed: C:\Users\ASUS\workspace\article-webpack\assets\css\app.css Unexpected token (1:5)
You may need an appropriate loader to handle this file type.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Ce que nous explique webpack, c’est qu’il aimerait bien importer notre fichier,
mais il ne sait pas comment faire. En effet, webpack ne sait s’occuper que des
fichiers JS out of the box. On va donc se servir d’un loader, non pas pour
transformer ce qui est importé, mais pour expliquer à webpack ce qu’il doit
faire quand on lui demande de charger un fichier CSS. Ce loader, c’est le
&lt;a href=&quot;https://www.npmjs.com/package/css-loader&quot;&gt;&lt;code&gt;css-loader&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On commence par l’installer :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install --save-dev css-loader
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Puis on l’ajoute aux règles de notre configuration :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; path = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;path&quot;&lt;/span&gt;);

&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = {
  &lt;span class=&quot;attr&quot;&gt;entry&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;./assets/js/app.js&quot;&lt;/span&gt;,
  &lt;span class=&quot;attr&quot;&gt;output&lt;/span&gt;: {
    &lt;span class=&quot;attr&quot;&gt;path&lt;/span&gt;: path.resolve(__dirname, &lt;span class=&quot;string&quot;&gt;&quot;web/assets&quot;&lt;/span&gt;),
    &lt;span class=&quot;attr&quot;&gt;filename&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;bundle.js&quot;&lt;/span&gt;,
  },
  &lt;span class=&quot;attr&quot;&gt;module&lt;/span&gt;: {
    &lt;span class=&quot;attr&quot;&gt;rules&lt;/span&gt;: [
      {
        &lt;span class=&quot;attr&quot;&gt;test&lt;/span&gt;: &lt;span class=&quot;regexp&quot;&gt;/\.js$/&lt;/span&gt;,
        &lt;span class=&quot;attr&quot;&gt;loader&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;babel-loader&quot;&lt;/span&gt;,
        &lt;span class=&quot;attr&quot;&gt;include&lt;/span&gt;: path.join(__dirname, &lt;span class=&quot;string&quot;&gt;&quot;assets&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;js&quot;&lt;/span&gt;),
        &lt;span class=&quot;attr&quot;&gt;options&lt;/span&gt;: {
          &lt;span class=&quot;attr&quot;&gt;presets&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&quot;env&quot;&lt;/span&gt;],
        },
      },
      {
        &lt;span class=&quot;comment&quot;&gt;// pour les fichiers CSS...&lt;/span&gt;
        test: &lt;span class=&quot;regexp&quot;&gt;/\.css$/&lt;/span&gt;,
        &lt;span class=&quot;comment&quot;&gt;// ...utilise le css-loader&lt;/span&gt;
        loader: &lt;span class=&quot;string&quot;&gt;&quot;css-loader&quot;&lt;/span&gt;,
      }
    ],
  },
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;De cette manière, webpack sera capable d’importer un fichier CSS. Toutefois, si
on recharge notre page, on s’apperçoit rapidement que le style n’est pas
appliqué. Et c’est normal. On a dit à webpack comment importer un fichier CSS,
mais on ne lui a pas dit ce qu’il doit faire avec ce qu’il a chargé. On a donc
actuellement un fichier CSS chargé en mémoire, mais on n’en fait rien. Pour s’en
convaincre, on peut faire la chose suivante :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// assets/js/app.js&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; styles &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;../css/app.css&quot;&lt;/span&gt;;

&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(styles);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Après avoir relancé webpack et affiché notre page, on peut voir un objet
contenant toutes nos règles CSS s’afficher dans la console du navigateur.&lt;/p&gt;
&lt;p&gt;On va donc avoir besoin d’un autre loader pour dire à webpack ce qu’il doit
faire avec le CSS qu’il a chargé : le
&lt;a href=&quot;https://www.npmjs.com/package/style-loader&quot;&gt;&lt;code&gt;style-loader&lt;/code&gt;&lt;/a&gt;.
Ce loader va prendre le résultat du &lt;code&gt;css-loader&lt;/code&gt;, et l’injecter dans une balise
&lt;code&gt;style&lt;/code&gt; dans le &lt;code&gt;head&lt;/code&gt; de notre page.&lt;/p&gt;
&lt;p&gt;On l’installe :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install --save-dev style-loader
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Puis on l’ajoute aux règles :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; path = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;path&quot;&lt;/span&gt;);

&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = {
  &lt;span class=&quot;attr&quot;&gt;entry&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;./assets/js/app.js&quot;&lt;/span&gt;,
  &lt;span class=&quot;attr&quot;&gt;output&lt;/span&gt;: {
    &lt;span class=&quot;attr&quot;&gt;path&lt;/span&gt;: path.resolve(__dirname, &lt;span class=&quot;string&quot;&gt;&quot;web/assets&quot;&lt;/span&gt;),
    &lt;span class=&quot;attr&quot;&gt;filename&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;bundle.js&quot;&lt;/span&gt;,
  },
  &lt;span class=&quot;attr&quot;&gt;module&lt;/span&gt;: {
    &lt;span class=&quot;attr&quot;&gt;rules&lt;/span&gt;: [
      {
        &lt;span class=&quot;attr&quot;&gt;test&lt;/span&gt;: &lt;span class=&quot;regexp&quot;&gt;/\.js$/&lt;/span&gt;,
        &lt;span class=&quot;attr&quot;&gt;loader&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;babel-loader&quot;&lt;/span&gt;,
        &lt;span class=&quot;attr&quot;&gt;include&lt;/span&gt;: path.join(__dirname, &lt;span class=&quot;string&quot;&gt;&quot;assets&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;js&quot;&lt;/span&gt;),
        &lt;span class=&quot;attr&quot;&gt;options&lt;/span&gt;: {
          &lt;span class=&quot;attr&quot;&gt;presets&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&quot;env&quot;&lt;/span&gt;],
        },
      },
      {
        &lt;span class=&quot;attr&quot;&gt;test&lt;/span&gt;: &lt;span class=&quot;regexp&quot;&gt;/\.css$/&lt;/span&gt;,
        &lt;span class=&quot;comment&quot;&gt;// il est possible de chaîner plusieurs loaders. Pour ça, on passe un&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;// tableau de loaders à la propriété `use`. Les loaders sont appliqués&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;// les uns à la suite des autres, en partant du dernier élément du tableau&lt;/span&gt;
        use: [
          { &lt;span class=&quot;attr&quot;&gt;loader&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;style-loader&quot;&lt;/span&gt; },
          { &lt;span class=&quot;attr&quot;&gt;loader&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;css-loader&quot;&lt;/span&gt; },
        ],
      },
    ],
  },
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Après avoir relancé webpack, le style est cette fois-ci bien appliqué à la page.
Sauf si dans votre CSS vous faites appel à des images ou des fonts. Car le
&lt;code&gt;css-loader&lt;/code&gt; va traiter ceux-ci comme des imports de modules, et webpack ne
saura pas comment les charger. On va donc appliquer deux dernières règles à
notre configuration : une pour charger les images, et une pour charger les
fonts. Les deux utiliseront le
&lt;a href=&quot;https://www.npmjs.com/package/file-loader&quot;&gt;&lt;code&gt;file-loader&lt;/code&gt;&lt;/a&gt; pour simplement
copier les fichiers dans le dossier défini dans &lt;code&gt;output.path&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;À nouveau, on l’installe :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install --save-dev file-loader
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Et on ajoute deux règles à notre configuration :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; path = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;path&quot;&lt;/span&gt;);

&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = {
  &lt;span class=&quot;attr&quot;&gt;entry&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;./assets/js/app.js&quot;&lt;/span&gt;,
  &lt;span class=&quot;attr&quot;&gt;output&lt;/span&gt;: {
    &lt;span class=&quot;attr&quot;&gt;path&lt;/span&gt;: path.resolve(__dirname, &lt;span class=&quot;string&quot;&gt;&quot;web/assets&quot;&lt;/span&gt;),
    &lt;span class=&quot;attr&quot;&gt;filename&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;bundle.js&quot;&lt;/span&gt;,
  },
  &lt;span class=&quot;attr&quot;&gt;module&lt;/span&gt;: {
    &lt;span class=&quot;attr&quot;&gt;rules&lt;/span&gt;: [
      {
        &lt;span class=&quot;attr&quot;&gt;test&lt;/span&gt;: &lt;span class=&quot;regexp&quot;&gt;/\.js$/&lt;/span&gt;,
        &lt;span class=&quot;attr&quot;&gt;loader&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;babel-loader&quot;&lt;/span&gt;,
        &lt;span class=&quot;attr&quot;&gt;include&lt;/span&gt;: path.join(__dirname, &lt;span class=&quot;string&quot;&gt;&quot;assets&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;js&quot;&lt;/span&gt;),
        &lt;span class=&quot;attr&quot;&gt;options&lt;/span&gt;: {
          &lt;span class=&quot;attr&quot;&gt;presets&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&quot;env&quot;&lt;/span&gt;],
        },
      },
      {
        &lt;span class=&quot;attr&quot;&gt;test&lt;/span&gt;: &lt;span class=&quot;regexp&quot;&gt;/\.css$/&lt;/span&gt;,
        &lt;span class=&quot;attr&quot;&gt;use&lt;/span&gt;: [
          { &lt;span class=&quot;attr&quot;&gt;loader&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;style-loader&quot;&lt;/span&gt; },
          { &lt;span class=&quot;attr&quot;&gt;loader&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;css-loader&quot;&lt;/span&gt; },
        ],
      },
      {
        &lt;span class=&quot;attr&quot;&gt;test&lt;/span&gt;: &lt;span class=&quot;regexp&quot;&gt;/\.(jpg|gif|png|svg)$/&lt;/span&gt;,
        &lt;span class=&quot;attr&quot;&gt;loader&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;file-loader&quot;&lt;/span&gt;,
      },
      {
        &lt;span class=&quot;attr&quot;&gt;test&lt;/span&gt;: &lt;span class=&quot;regexp&quot;&gt;/\.(ttf|woff|woff2|eot)/&lt;/span&gt;,
        &lt;span class=&quot;attr&quot;&gt;loader&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;file-loader&quot;&lt;/span&gt;,
      }
    ],
  },
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;De cette manière, quand webpack croisera un de ces fichiers, il le copiera dans
le dossier &lt;code&gt;output.path&lt;/code&gt; et remplacera le chemin d’origine par celui où il aura
placé le fichier.&lt;/p&gt;
&lt;h2 id=&quot;le-mode-watch-&quot;&gt;Le mode &lt;code&gt;watch&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Relancer webpack à chaque fois qu’on fait une modification est chronophage. On
aimerait bien que celui-ci se relance automatiquement lorsqu’on modifie un
fichier. C’est possible, en utilisant le mode &lt;code&gt;watch&lt;/code&gt; de webpack. Celui-ci peut
être activé de 2 manières : via le fichier de configuration, ou via la ligne de
commande.&lt;/p&gt;
&lt;p&gt;Pour le fichier de configuration, il suffit d’ajouter le booléen &lt;code&gt;watch: true&lt;/code&gt; à
l’objet exporté :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; path = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;path&quot;&lt;/span&gt;);

&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = {
  &lt;span class=&quot;attr&quot;&gt;entry&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;./assets/js/app.js&quot;&lt;/span&gt;,
  &lt;span class=&quot;attr&quot;&gt;output&lt;/span&gt;: {
    &lt;span class=&quot;attr&quot;&gt;path&lt;/span&gt;: path.resolve(__dirname, &lt;span class=&quot;string&quot;&gt;&quot;web/assets&quot;&lt;/span&gt;),
    &lt;span class=&quot;attr&quot;&gt;filename&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;bundle.js&quot;&lt;/span&gt;,
  },
  &lt;span class=&quot;attr&quot;&gt;module&lt;/span&gt;: {
    &lt;span class=&quot;attr&quot;&gt;rules&lt;/span&gt;: [
      {
        &lt;span class=&quot;attr&quot;&gt;test&lt;/span&gt;: &lt;span class=&quot;regexp&quot;&gt;/\.js$/&lt;/span&gt;,
        &lt;span class=&quot;attr&quot;&gt;loader&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;babel-loader&quot;&lt;/span&gt;,
        &lt;span class=&quot;attr&quot;&gt;include&lt;/span&gt;: path.join(__dirname, &lt;span class=&quot;string&quot;&gt;&quot;assets&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;js&quot;&lt;/span&gt;),
        &lt;span class=&quot;attr&quot;&gt;options&lt;/span&gt;: {
          &lt;span class=&quot;attr&quot;&gt;presets&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&quot;env&quot;&lt;/span&gt;],
        },
      },
      {
        &lt;span class=&quot;attr&quot;&gt;test&lt;/span&gt;: &lt;span class=&quot;regexp&quot;&gt;/\.css$/&lt;/span&gt;,
        &lt;span class=&quot;attr&quot;&gt;use&lt;/span&gt;: [
          { &lt;span class=&quot;attr&quot;&gt;loader&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;style-loader&quot;&lt;/span&gt; },
          { &lt;span class=&quot;attr&quot;&gt;loader&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;css-loader&quot;&lt;/span&gt; },
        ],
      },
      {
        &lt;span class=&quot;attr&quot;&gt;test&lt;/span&gt;: &lt;span class=&quot;regexp&quot;&gt;/\.(jpg|gif|png|svg)$/&lt;/span&gt;,
        &lt;span class=&quot;attr&quot;&gt;loader&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;file-loader&quot;&lt;/span&gt;,
      },
      {
        &lt;span class=&quot;attr&quot;&gt;test&lt;/span&gt;: &lt;span class=&quot;regexp&quot;&gt;/\.(ttf|woff|woff2|eot)/&lt;/span&gt;,
        &lt;span class=&quot;attr&quot;&gt;loader&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;file-loader&quot;&lt;/span&gt;,
      }
    ],
  },
  &lt;span class=&quot;comment&quot;&gt;// webpack se lancera tout le temps en mode watch&lt;/span&gt;
  watch: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pour la ligne de commande, il faut ajouter le flag &lt;code&gt;-w&lt;/code&gt;. On peut donc se faire
un script &lt;code&gt;start&lt;/code&gt; qui lance webpack en mode watch :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-json&quot;&gt;&amp;quot;scripts&amp;quot;: {
  &amp;quot;build&amp;quot;: &amp;quot;webpack&amp;quot;,
  &amp;quot;start&amp;quot;: &amp;quot;webpack -w&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ainsi, en lançant &lt;code&gt;npm start&lt;/code&gt; en console, webpack crée un bundle, puis attend
qu’on fasse des modifications pour se relancer automatiquement. De plus, il
utilise un cache qui lui permet de recompiler le bundle très rapidement.&lt;/p&gt;
&lt;p&gt;Voilà pour cette introduction à webpack, sa philosophie et son concept de
&lt;em&gt;loaders&lt;/em&gt;. Cet outil est capable de faire énormément d’autres choses. Je vous
conseille de jeter un oeil à la documentation qui est très bien faite. Dans les
prochains articles, on abordera des aspects plus spécifiques comme le
&lt;em&gt;code splitting&lt;/em&gt;, les &lt;em&gt;plugins&lt;/em&gt;, les &lt;em&gt;sourcemaps&lt;/em&gt;, &lt;code&gt;webpack-dev-server&lt;/code&gt; et le
&lt;em&gt;hot module replacement&lt;/em&gt;. Nous verrons aussi comment webpack peut totalement
remplacer un workflow utilisant gulp (et ça vaudra aussi pour grunt,
évidemment).&lt;/p&gt;
</description>
    </item>
    <item>
      <title>LessPass, pour avoir des mots de passe solides sans avoir à s'en souvenir</title>
      <link>http://jesmodrazik.fr/articles/lesspass/</link>
      <pubDate>Tue, 22 Nov 2016 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://jesmodrazik.fr/articles/lesspass/</guid>
      <author></author>
      <description>&lt;p&gt;Pour ne pas se faire pirater un compte important (mail, réseaux sociaux…), il
faut respecter des règles bien précises pour nos mots de passe : ne pas utiliser
deux fois le même, varier les caractères, former un mot de passe assez long…
Respecter toutes ces règles et se souvenir parfaitement de tous nos mots de
passe de tête est extrêmement compliqué. LessPass permet de régler ce problème.&lt;/p&gt;
&lt;h2 id=&quot;qu-est-ce-que-lesspass-&quot;&gt;Qu’est-ce que LessPass ?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://lesspass.com/&quot;&gt;LessPass&lt;/a&gt; est un gestionnaire de mots de passe. A ce
moment-là, vous devez vous dire qu’il en existe déjà
&lt;a href=&quot;https://www.lastpass.com/&quot;&gt;des&lt;/a&gt; &lt;a href=&quot;http://keepass.info/&quot;&gt;tas&lt;/a&gt;
&lt;a href=&quot;https://www.dashlane.com/&quot;&gt;d’autres&lt;/a&gt;, et vous demander quel est l’intérêt d’en
créer un nouveau.&lt;/p&gt;
&lt;p&gt;La particularité de LessPass réside dans le fait que celui-ci est basé sur une
fonction pure (c’est à dire que lorsqu’on l’invoque plusieurs fois en lui
passant les mêmes paramètres, elle renvoit toujours le même résultat), ce qui
lui permet de ne jamais avoir à stocker vos mots de passe dans une base de
données. Il n’y a donc pas de base de données qui peut être compromise, et il
n’y a pas besoin de synchroniser cette base entre vos différents devices. Le
fonctionnement interne de LessPass est très bien détaillé dans
&lt;a href=&quot;https://blog.lesspass.com/lesspass-how-it-works-dde742dd18a4#.f4ovto7cj&quot;&gt;un article sur le blog officiel&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;comment-l-installer-&quot;&gt;Comment l’installer ?&lt;/h2&gt;
&lt;p&gt;LessPass propose des extensions pour &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/lesspass/&quot;&gt;Firefox&lt;/a&gt;
et pour &lt;a href=&quot;https://chrome.google.com/webstore/detail/lesspass/lcmbpoclaodbgkbjafnkbbinogcbnjih&quot;&gt;Chrome&lt;/a&gt;,
une &lt;a href=&quot;https://github.com/lesspass/cozy&quot;&gt;application Cozy&lt;/a&gt;, un
&lt;a href=&quot;https://github.com/lesspass/cli&quot;&gt;outil en ligne de commande&lt;/a&gt;. Si aucune de ces
solutions ne vous convient, il reste toujours le
&lt;a href=&quot;https://lesspass.com/&quot;&gt;site officiel&lt;/a&gt;, mais LessPass conseille d’utiliser une
solution installée en local pour des raisons de sécurité. L’outil est donc
disponible pour vous, quels que soient votre machine, OS, navigateur…&lt;/p&gt;
&lt;h2 id=&quot;comment-l-utiliser-&quot;&gt;Comment l’utiliser ?&lt;/h2&gt;
&lt;p&gt;Je ne parlerais ici que de l’extension Firefox, puisque c’est celle que
j’utilise. Mais le fonctionnement des autres solutions que propose LessPass est
le même.&lt;/p&gt;
&lt;p&gt;Une fois l’extension installée, l’icône de LessPass (une clef dans un losange
bleu) s’affiche en haut à drotie de votre navigateur. Au click sur cette icône,
l’interface s’affiche :&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/lesspass/images/01.png&quot; alt=&quot;Interface de LessPass&quot;&gt;&lt;/p&gt;
&lt;p&gt;Cette interface est très simple. Par défaut, le premier champ reprend le
domaine du site sur lequel vous vous trouvez. Le deuxième champ correspond au
login que vous utilisez sur ce site. Le troisième champ correspond à votre
master password, ou mot de passe principal. C’est le seul dont vous devrez vous
souvenir pour pouvoir retrouver tous vos autres mots de passe générés par
LessPas. Il est donc conseillé d’avoir un master password complexe.&lt;/p&gt;
&lt;p&gt;Grâce à ces trois informations, et avec les options qui se trouvent tout en bas
de l’interface (longueur, caractères, itérations), un mot de passe est généré.
Tant que vous fournirez les mêmes entrées et les mêmes paramètres, le meme mot
de passe vous sera fournit.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/lesspass/images/02.png&quot; alt=&quot;Interface de LessPass avec toutes les informations remplies&quot;&gt;&lt;/p&gt;
&lt;p&gt;Il ne reste plus qu’à copier/coller le mot de passe généré dans votre formulaire
de login ou d’inscription, et le tour est joué.&lt;/p&gt;
&lt;h2 id=&quot;pour-finir&quot;&gt;Pour finir&lt;/h2&gt;
&lt;p&gt;Lorsque je vous ai dit que LessPass n’utilisait pas de base de donnée pour
stocker vos mots de passe, je vous ai à moitié menti. Il est possible
d’utiliser une base de données. Pour cela, il faut cliquer sur l’icône qui se
trouve en haut à droite de l’interface. Vous pouvez alors créer un nouveau
compte, soit directement sur &lt;a href=&quot;http://jesmodrazik.fr/articles/lesspass/lesspass.com&quot;&gt;lesspass.com&lt;/a&gt;, soit sur une instance
auto-hébergée. Je n’ai toutefois pas encore testé cette fonctionnalité, puisque
le fonctionnement de base me convient pour le moment.&lt;/p&gt;
&lt;p&gt;Je vous conseille donc l’utilisation de LessPass pour gérer vos mots de passe.
Celui-ci permet d’avoir des mots de passe complexes, différent sur chaque
service, et de ne pas avoir à s’en souvenir. Si vous voulez aller encore plus
loin niveau sécurité et vie privée, je vous conseille de lire l’article suivant
sur Medium :
&lt;a href=&quot;https://medium.freecodecamp.com/tor-signal-and-beyond-a-law-abiding-citizens-guide-to-privacy-1a593f2104c3#.i6gyeryj1&quot;&gt;How to encrypt your entire life in less than an hour&lt;/a&gt;
; ainsi que les articles &lt;a href=&quot;https://ssd.eff.org/fr&quot;&gt;Surveillance Self-Defense&lt;/a&gt; de
l’EFF.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Veille de la semaine - 10/11/2016</title>
      <link>http://jesmodrazik.fr/articles/veille-13/</link>
      <pubDate>Thu, 10 Nov 2016 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://jesmodrazik.fr/articles/veille-13/</guid>
      <author></author>
      <description>&lt;p&gt;Cette semaine une mise à jour importante d’Atom pour qui n’utilise pas un
clavier US, l’histoire d’Unicode, une sensibilisation au chargement asynchrone
des web fonts, des outils pour développer des sites accessibles, un outil pour
voir son site développé avec React comme le robot de Google, et la suppression
de l’API Battery Status dans Firefox.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/atom/atom/releases/tag/v1.12.0&quot;&gt;Atom 1.12.0&lt;/a&gt; est sortit et
l’éditeur gère maintenant tous les layouts de claviers nativement. Il n’y a donc
plus besoin d’installer le package &lt;code&gt;keyboard-localization&lt;/code&gt; dont je parlais dans
un &lt;a href=&quot;http://jesmodrazik.fr/atom-crochet-accolade-fermant&quot;&gt;précédent article&lt;/a&gt;. L’équipe a d’ailleurs
expliqué dans un
&lt;a href=&quot;http://blog.atom.io/2016/10/17/the-wonderful-world-of-keyboards.html&quot;&gt;article sur son blog&lt;/a&gt;
pourquoi cette fonctionnalité a mit du temps à arriver.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jolicode.com/blog/l-histoire-d-unicode-et-son-adoption-sur-le-web&quot;&gt;L’histoire d’Unicode et son adoption sur le web&lt;/a&gt; :
comme le nom l’indique, cet article nous explique pourquoi Unicode a été inventé,
comment il fonctionne et pourquoi il est depuis un moment maintenant un standard
sur le web.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://meowni.ca/posts/web-fonts/&quot;&gt;Web fonts, boy, I don’t know&lt;/a&gt; : tout le
monde n’a pas toujours une connexion 4G ou fibre. Il est donc important de faire
en sorte que le contenu s’affiche le plus rapidement possible, en chargeant ce
qui n’est pas nécessaire à son affichage de manière asynchrone. Les web fonts
font partie de ces ressources qui ne sont pas nécessaires à l’affichage du
contenu, mais qui le retardent. Cet article a pour but de sensibiliser au
chargement asynchrone des web fonts.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bitsofco.de/tools-for-developing-accessible-websites/&quot;&gt;Tools for Developing Accessible Websites&lt;/a&gt; :
une présentation de 6 outils permettant de tester l’accessibilité d’un site web.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://auth0.com/blog/five-things-you-can-do-with-yarn/&quot;&gt;5 things you can do with Yarn&lt;/a&gt; :
Yarn permet de faire des choses que ne permet pas npm : travail hors-ligne;
installation de packages issus de plusieurs registres; installation plus rapide
des packages; génération automatique d’un fichier &lt;code&gt;lock&lt;/code&gt;; déterminisme qui
implique qu’avec le même &lt;code&gt;package.json&lt;/code&gt;, deux machines auront le même
&lt;code&gt;node_modules&lt;/code&gt; après l’installation.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.freecodecamp.com/using-fetch-as-google-for-seo-experiments-with-react-driven-websites-914e0fc3ab1#.grayaf9sf&quot;&gt;Testing a React-driven website’s SEO using “Fetch as Google”&lt;/a&gt; :
en utilisant la Google Search Console, il est possible de voir comment le robot
de Google voit votre SPA.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.bleepingcomputer.com/news/software/battery-status-api-being-removed-from-firefox-due-to-privacy-concerns/&quot;&gt;Battery Status API being Removed from Firefox due to Privacy Concerns&lt;/a&gt; :
Mozilla a décidé de supprimer l’API Battery Status de Firefox car celle-ci
était surtout utilisée par les annonceurs qui s’en servaient pour tracker les
utilisateurs encore plus finement qu’auparavant.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>L'autocomplétion dans Atom</title>
      <link>http://jesmodrazik.fr/articles/atom-autocomplete/</link>
      <pubDate>Tue, 08 Nov 2016 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://jesmodrazik.fr/articles/atom-autocomplete/</guid>
      <author></author>
      <description>&lt;p&gt;Il y a un peu plus de 2 ans, j’expliquais pourquoi
&lt;a href=&quot;http://jesmodrazik.fr/articles/sublime-text-ide-a-la-carte/&quot;&gt;je préfère les éditeurs de texte légers aux gros IDE&lt;/a&gt;.
C’est toujours le cas, à la différence près que j’ai abandonné Sublime Text pour
Atom. Cette préférence a un inconvénient qui découle d’un avantage majeur : il
n’y a pas de véritable autocomplétion pré-packagée. Evidemment, puisque dans ce
genre d’éditeur, l’intégration de fonctionnalités spécifique est laissée à
l’appréciation de l’utilisateur. Intégrer de l’autocomplétion pour les langages
qu’on utilise n’a rien de complexe, il faut juste prendre 5 minutes pour s’y
pencher. De mon côté, j’ai besoin d’autocomplétion sur du JavaScript, du PHP et
le framework Symfony.&lt;/p&gt;
&lt;h2 id=&quot;la-base-autocomplete-plus-&quot;&gt;La base : &lt;code&gt;autocomplete-plus&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://atom.io/packages/autocomplete-plus&quot;&gt;&lt;code&gt;autocomplete-plus&lt;/code&gt;&lt;/a&gt; est le
provider de base de toute autocomplétion dans Atom. Celui-ci est prépackagé
avec Atom. Il propose de base un provider simple, le &lt;code&gt;SymbolProvider&lt;/code&gt; qui
propose une autocomplétion basée sur les “symboles” (en gros, les mots) présents
dans le fichier en cours d’édition.&lt;/p&gt;
&lt;p&gt;Ce package est la base car il propose une API sur laquelle d’autres providers
peuvent venir s’appuyer pour proposer une autocomplétion plus spécifique et
efficace. Et les providers sont nombreux. Pour s’en convaincre, il suffit de
faire une &lt;a href=&quot;https://atom.io/packages/search?utf8=%E2%9C%93&amp;amp;q=autocomplete&quot;&gt;petite recherche sur le site d’Atom&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;de-l-autocompl-tion-javascript&quot;&gt;De l’autocomplétion JavaScript&lt;/h2&gt;
&lt;p&gt;En JavaScript, on a besoin d’autocomplétion pour le langage en général (classes,
fonctions, variables…), mais aussi pour l’import de modules.&lt;/p&gt;
&lt;h3 id=&quot;l-autocompl-tion-classique-&quot;&gt;L’autocomplétion “classique”&lt;/h3&gt;
&lt;p&gt;Pour ça, on va utiliser &lt;a href=&quot;https://atom.io/packages/atom-ternjs&quot;&gt;&lt;code&gt;atom-ternjs&lt;/code&gt;&lt;/a&gt;
qui se base sur &lt;a href=&quot;https://github.com/ternjs/tern&quot;&gt;Tern&lt;/a&gt; et &lt;code&gt;autocomplete-plus&lt;/code&gt;
pour fournir une autocomplétion très efficace pour JavaScript.&lt;/p&gt;
&lt;p&gt;Tern doit être configuré pour chaque projet, ce qui nous laisse la main pour
définir les librairies externes qu’on veut utiliser. En effet, Tern est capable
de nous proposer de l’autocomplete pour l’API de jQuery, d’AngularJS, NodeJS (et
bien d’autres) si on le lui demande. Cette configuration peut bien évidemment
évoluer au cours de la vie du projet. Il suffira alors de modifier le fichier
de configuration en y ajoutant ou en enlevant les plugins souhaités.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/atom-autocomplete/images/atom-ternjs-example.jpg&quot; alt=&quot;Autocomplétion dans une classe JavaScript&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;l-autocompl-tion-d-import-de-modules&quot;&gt;L’autocomplétion d’import de modules&lt;/h3&gt;
&lt;p&gt;Pour ne pas avoir à se souvenir de tous les noms des modules qu’on utilise, on
va utiliser
&lt;a href=&quot;https://atom.io/packages/autocomplete-modules&quot;&gt;&lt;code&gt;autocomplete-modules&lt;/code&gt;&lt;/a&gt;. Ce
package analyse notre dossier &lt;code&gt;node_modules&lt;/code&gt; et nous propose les noms des
modules qui s’y trouvent lorsqu’on est en train de taper un &lt;code&gt;require(&amp;#39;toto&amp;#39;)&lt;/code&gt; ou
un &lt;code&gt;import toto from &amp;#39;toto&amp;#39;&lt;/code&gt;. Il nous propose aussi nos modules locaux si le nom
qu’on est en train de taper commence par &lt;code&gt;./&lt;/code&gt; ou &lt;code&gt;../&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/atom-autocomplete/images/autocomplete-modules-example.jpg&quot; alt=&quot;Autocomplétion d&amp;#39;import de modules&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;de-l-autocompl-tion-php&quot;&gt;De l’autocomplétion PHP&lt;/h2&gt;
&lt;p&gt;Pour PHP, comme pour JavaScript, on a bien entendu besoin d’une autocomplétion
générale pour l’ensemble du langage. Mais puisque je travaille majoritairement
avec le framework Symfony, j’ai aussi besoin de choses propres à celui-ci, pour
le nom des services par exemple.&lt;/p&gt;
&lt;h3 id=&quot;l-autocompl-tion-g-n-rale&quot;&gt;L’autocomplétion générale&lt;/h3&gt;
&lt;p&gt;Pour l’autocomplétion générale en PHP, &lt;a href=&quot;https://atom.io/packages/atom-autocomplete-php&quot;&gt;&lt;code&gt;atom-autocomplete-php&lt;/code&gt;&lt;/a&gt;
fait un très bon travail. Celui-ci s’appuie sur Composer et les blocs de
documentation présents dans le code. Pour qu’il fonctionne, il faut spécifier le
chemin vers votre Composer et votre PHP. Les deux autres paramètres
“Autoload file” et “Classmap files” peuvent être laissés à leur valeur par
défaut pour une utilisation classique de Composer.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/atom-autocomplete/images/atom-autocomplete-php-example.jpg&quot; alt=&quot;Autocomplétion PHP&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;l-autocompl-tion-symfony&quot;&gt;L’autocomplétion Symfony&lt;/h3&gt;
&lt;p&gt;Ici, c’est sur &lt;a href=&quot;https://atom.io/packages/atom-symfony2&quot;&gt;&lt;code&gt;atom-symfony2&lt;/code&gt;&lt;/a&gt; qu’on
va compter. Celui-ci propose de l’autocomplétion sur différentes choses.
D’abord, dans les fichiers de configuration, il propose de l’autocomplétion sur
les noms de services et sur les classes. Ensuite, dans une classe utilisant le
conteneur d’injection de dépendance, celui-ci propose de l’autocomplétion sur
les noms de services.&lt;/p&gt;
&lt;p&gt;Pour fonctionner, celui-ci nécessite qu’on ait installé &lt;code&gt;atom-autocomplete-php&lt;/code&gt;,
que celui-ci soit fonctionnel, et qu’on ait bien spécifier le chemin du fichier
&lt;code&gt;console&lt;/code&gt; dnas la configuration. Pour ce dernier détail, si on travaille avec
Symfony 2, on peut laisser la valeur par défaut (&lt;code&gt;app/console&lt;/code&gt;). Mais si on
travaille avec Symfony 3, il faut spécifier le nouvel emplacement de ce
fichier : &lt;code&gt;bin/console&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/atom-autocomplete/images/atom-symfony2-example.jpg&quot; alt=&quot;Autocomplétion de services dans un contrôleur Symfony&quot;&gt;&lt;/p&gt;
&lt;p&gt;Et voici. Pour avoir de
l’autocomplete sur d’autres langages, il vous suffit de trouver et d’installer
un plugin pour le ou les langages qui vous intéressent. Il y a très peu de
chance qu’un tel plugin n’existe pas déjà.&lt;/p&gt;
&lt;p&gt;Petit bonus, pour ne pas avoir à installer les mêmes packages deux
fois (au boulot et à la maison), vous pouvez utiliser
&lt;a href=&quot;https://atom.io/packages/sync-settings&quot;&gt;&lt;code&gt;sync-settings&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Apprendre à se servir de ce qu'on a : AJAX</title>
      <link>http://jesmodrazik.fr/articles/apprendre-a-se-servir-de-ce-quon-a-ajax/</link>
      <pubDate>Thu, 03 Nov 2016 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://jesmodrazik.fr/articles/apprendre-a-se-servir-de-ce-quon-a-ajax/</guid>
      <author></author>
      <description>&lt;p&gt;Quel site web, aujourd’hui, n’utilise pas de requête AJAX, cette technologie permettant d’envoyer des requêtes HTTP à un serveur de manière (a)synchrone, et donc de rafraîchir des données affichées sans avoir à recharger la page en cours de consultation ? Celui que vous êtes en train de lire, certes… Mais aujourd’hui une grande majorité des sites web que vous visitez tirent très certainement parti d’AJAX. Mais au fait, quand on fait un &lt;code&gt;$.ajax()&lt;/code&gt;, ça fait quoi ?&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Cet article est le sixième de la série &lt;a href=&quot;http://jesmodrazik.fr/articles/apprendre-a-se-servir-de-ce-quon-a&quot;&gt;“apprendre à se servir de ce qu’on a”&lt;/a&gt;, ayant pour objectif de montrer que l’utilisation d’une bibliothèque telle que jQuery n’a pas toujours de sens. N’hésitez pas à parcourir les autres articles !&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;ajax-ou-plut-t-xmlhttprequest&quot;&gt;AJAX, ou plutôt XMLHttpRequest&lt;/h2&gt;
&lt;p&gt;AJAX (pour Asynchronous Javascript And XML) n’est pas une technologie en tant que telle, mais un ensemble de technologies. Ce concept se base en particulier sur l’objet &lt;code&gt;XMLHttpRequest&lt;/code&gt; introduit par Microsoft dans Internet Explorer, qui a été par la suite standardisé.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt; permet d’envoyer des requêtes HTTP vers un serveur sans avoir à rafraichir la page en cours d’affichage. Ces requêtes peuvent être synchrones ou asynchrones. Dans le premier cas, l’exécution du thread JS est interrompue et attend la réponse du serveur pour reprendre. Dans le second cas, le thread continue sa petite vie, et c’est un événement qui sera lancé pour le notifiier de l’arrivée de la réponse du serveur. Il va sans dire que c’est le deuxième cas qui est le plus intéressant, puisque le premier bloque tout interaction avec la page tant que la réponse n’est pas arrivée.&lt;/p&gt;
&lt;p&gt;Le nom “AJAX” est trompeur car le serveur ne renvoie pas obligatoirement du XML. Plusieurs formats peuvent être gérés : texte brut, HTML, XML, JSON, données binaires…&lt;/p&gt;
&lt;h2 id=&quot;faire-pareil-mais-sans&quot;&gt;Faire pareil, mais sans&lt;/h2&gt;
&lt;p&gt;Voyons voir comment fonctionne cet objet XMLHttpRequest.&lt;/p&gt;
&lt;h3 id=&quot;envoyer-une-requ-te-simple-sans-param-tre&quot;&gt;Envoyer une requête simple, sans paramètre&lt;/h3&gt;
&lt;p&gt;D’abord il nous faut un objet…&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; xhr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XMLHttpRequest();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ensuite il faut dire sur quelle URL on veut faire notre requête et la méthode HTTP qu’on veut utiliser. Il est possible d’utiliser les méthodes GET et POST, ainsi qu’une plus spéciale, HEAD, qui permet de ne récupérer que l’entête de la réponse. Pour commencer, nous allons faire une simple requête en GET sur la page d’accueil du blog :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;xhr.open(&lt;span class=&quot;string&quot;&gt;'GET'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'http://jesmodrazik.fr'&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Il est possible de spécifier 3 autres paramètres :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Un booléen spécifiant si la requête est asynchrone ou non. Par défaut celui-ci vaut &lt;code&gt;true&lt;/code&gt;, donc la requête sera asynchrone&lt;/li&gt;
&lt;li&gt;Un login en cas d’identification nécessaire (type .htaccess)&lt;/li&gt;
&lt;li&gt;Le mot de passe qui va avec&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pour faire une requête HEAD ou POST, il suffit de spécifier la méthode souhaitée en premier paramètre.&lt;/p&gt;
&lt;p&gt;Il ne nous reste plus qu’à envoyer la requête :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;xhr.send(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;envoyer-une-requ-te-avec-des-param-tres&quot;&gt;Envoyer une requête avec des paramètres&lt;/h3&gt;
&lt;p&gt;Dans le cas d’une requête GET ou HEAD (qui n’est ni plus ni moins qu’une requête GET, à la différence près qu’on ne récupère que l’entête de la réponse), le passage de paramètres se fait dans l’URL qu’on passe à la méthode &lt;code&gt;open&lt;/code&gt;, comme on le ferait dans la barre d’adresse de notre navigateur :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;xhr.open(&lt;span class=&quot;string&quot;&gt;'GET'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'http://jesmodrazik.fr?param1=value2&amp;amp;param2=value2'&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dans le cas d’une requête POST, il faut d’abord préciser dans l’entête de la requête que les paramètres viennent d’un formulaire (même si ce n’est pas le cas) :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;xhr.open(&lt;span class=&quot;string&quot;&gt;'POST'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'http://jesmodrazik.fr'&lt;/span&gt;);
xhr.setRequestHeader(&lt;span class=&quot;string&quot;&gt;'Content-Type'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'application/x-form-urlencoded'&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Puis il faut passer les paramètres à la méthode &lt;code&gt;send&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;xhr.send(&lt;span class=&quot;string&quot;&gt;'param1=value1&amp;amp;param2=value2'&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dans les deux cas, il est nécessaire de convertir les paramètres qu’on veut passer à notre requête, afin que ceux-ci ne contiennent aucun caractère interdit dans une URL. Pour cela, il faut utiliser la fonction &lt;code&gt;encodeURIComponent&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// le caractère &quot;&amp;amp;&quot; a une signification dans une URL, il faut donc le convertir&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; param1 = &lt;span class=&quot;built_in&quot;&gt;encodeURIComponent&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'value1&amp;amp;'&lt;/span&gt;);
&lt;span class=&quot;comment&quot;&gt;// ici, pas de caractère à convertir, mais dans le cas d'une saisie utilisateur, on ne peut pas prédire ce qu'on reçoit !&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; param2 = &lt;span class=&quot;built_in&quot;&gt;encodeURIComponent&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'value2'&lt;/span&gt;);

xhr.send(&lt;span class=&quot;string&quot;&gt;'param1='&lt;/span&gt; + param1 + &lt;span class=&quot;string&quot;&gt;'&amp;amp;param2='&lt;/span&gt; + param2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Maintenant qu’on sait envoyer une requête, il faudrait savoir…&lt;/p&gt;
&lt;h3 id=&quot;r-cup-rer-la-r-ponse&quot;&gt;Récupérer la réponse&lt;/h3&gt;
&lt;p&gt;Qui dit asynchrone dit callback. On va donc commencer par attacher une fonction à un événement qui nous notifiera l’arrivée de la réponse :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Directement via onreadystatechange&lt;/span&gt;
xhr.onreadystatechange = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{};

&lt;span class=&quot;comment&quot;&gt;// Ou avec addEventListener&lt;/span&gt;
xhr.addEventListener(&lt;span class=&quot;string&quot;&gt;'readystatechange'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Comme le nom de l’événement l’indique, nous n’écoutons pas réellement l’arrivée de la réponse, mais tout changement d’état de la requête. Le nombre d’état possible pour une &lt;code&gt;XMLHttpRequest&lt;/code&gt; est de 5. Chaque état est représenté par un nombre entier, ainsi qu’une constante de l’objet &lt;code&gt;XMLHttpRequest&lt;/code&gt; qui le représente :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;XMLHttpRequest.UNSENT === 0&lt;/code&gt; : on a un objet &lt;code&gt;XMLHttpRequest&lt;/code&gt; tout frais sur lequel la méthode &lt;code&gt;open()&lt;/code&gt; n’a pas encore été appelée&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XMLHttpRequest.OPENED === 1&lt;/code&gt; : la méthode &lt;code&gt;open()&lt;/code&gt; a été appelée sur l’objet, mais pas la méthode &lt;code&gt;send()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XMLHttpRequest.HEADERS_RECEIVED === 2&lt;/code&gt; : la méthode &lt;code&gt;send()&lt;/code&gt; a été appelée, la requête a été entièrement envoyée&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XMLHttpRequest.LOADING === 3&lt;/code&gt; : le serveur a commencé à renvoyer des données&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XMLHttpRequest.DONE === 4&lt;/code&gt; : on a reçu toutes les données de la réponse&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Puisqu’on est intéressés uniquement par le dernier état, on va commencer par ajouter une condition sur celui-ci :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;xhr.onreadystatechange = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (xhr.readyState === xhr.DONE) {}
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Il faut maintenant détecter si tout s’est bien passé. Si c’est le cas, alors la réponse du serveur doit avoir un code HTTP 2xx. Nouvelle condition :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;xhr.onreadystatechange = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (xhr.readyState === xhr.DONE) {
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (xhr.status &amp;gt;= &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt; &amp;amp;&amp;amp; xhr.status &amp;lt; &lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;) {
            &lt;span class=&quot;comment&quot;&gt;// OK&lt;/span&gt;
        } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
            &lt;span class=&quot;comment&quot;&gt;// Erreur ou redirection HTTP. Il est possible de gérer ces cas,&lt;/span&gt;
            &lt;span class=&quot;comment&quot;&gt;// mais le but est de rester le plus simple possible ici&lt;/span&gt;
        }
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;r-cup-rer-les-donn-es-re-ues&quot;&gt;Récupérer les données reçues&lt;/h3&gt;
&lt;p&gt;Les données de la réponse sont contenues dans &lt;code&gt;xhr.responseXML&lt;/code&gt; si ces données sont du XML, et dans &lt;code&gt;xhr.responseText&lt;/code&gt; dans tous les autres cas. &lt;code&gt;responseXML&lt;/code&gt; est un DOM qui peut être parcouru de la même manière que n’importe quel autre DOM. &lt;code&gt;responseText&lt;/code&gt; n’est que du texte brut. Si on sait qu’on reçoit du JSON, alors on peut le parser avec &lt;code&gt;JSON.parse()&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;xhr.onreadystatechange = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (xhr.readyState === xhr.DONE) {
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (xhr.status &amp;gt;= &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt; &amp;amp;&amp;amp; xhr.status &amp;lt; &lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;) {
            &lt;span class=&quot;comment&quot;&gt;// On récupère du XML&lt;/span&gt;
            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; elements = xhr.responseXML.getElementsByTagName(&lt;span class=&quot;string&quot;&gt;'element'&lt;/span&gt;);

            &lt;span class=&quot;comment&quot;&gt;// On récupère du JSON&lt;/span&gt;
            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data = &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse(xhr.responseText);
        } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
            &lt;span class=&quot;comment&quot;&gt;// Erreur&lt;/span&gt;
        }
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;g-rer-les-erreurs&quot;&gt;Gérer les erreurs&lt;/h3&gt;
&lt;p&gt;Lorsque le status n’est pas 2xx, c’est que le serveur a renvoyé une erreur. Dans ce cas, on peut savoir quelle est l’erreur en regardant le code HTTP contenu dans &lt;code&gt;xhr.status&lt;/code&gt;, évidemment, mais aussi ce que contient &lt;code&gt;xhr.statusText&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;xhr.onreadystatechange = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (xhr.readyState === xhr.DONE) {
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (xhr.status &amp;gt;= &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt; &amp;amp;&amp;amp; xhr.status &amp;lt; &lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;) {
            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data = &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse(xhr.responseText);
        } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(xhr.status, xhr.statusText);
        }
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;r-capitulons&quot;&gt;Récapitulons&lt;/h3&gt;
&lt;p&gt;Pour faire de l’AJAX sans jQuery, voici donc ce qu’il faut faire (on imagine qu’on veut faire une requête en POST avec les paramètres &lt;code&gt;param1&lt;/code&gt; et &lt;code&gt;param2&lt;/code&gt; sur &lt;code&gt;http://jesmodrazik.fr&lt;/code&gt;, et qu’on récupère du JSON qu’on veut simplement afficher dans la console du navigateur):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; xhr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XMLHttpRequest();
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; param1 = &lt;span class=&quot;built_in&quot;&gt;encodeURIComponent&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'value1&amp;amp;'&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; param2 = &lt;span class=&quot;built_in&quot;&gt;encodeURIComponent&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'value2'&lt;/span&gt;);

xhr.open(&lt;span class=&quot;string&quot;&gt;'POST'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'http://jesmodrazik.fr'&lt;/span&gt;);
xhr.setRequestHeader(&lt;span class=&quot;string&quot;&gt;'Content-Type'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'application/x-form-urlencoded'&lt;/span&gt;);

xhr.onreadystatechange = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (xhr.readyState === xhr.DONE) {
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (xhr.status &amp;gt;= &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt; &amp;amp;&amp;amp; xhr.status &amp;lt; &lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;) {
            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data = &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse(xhr.responseText);

            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(data);
        } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(xhr.status, xhr.statusText);
        }
    }
};

xhr.send(&lt;span class=&quot;string&quot;&gt;'param1='&lt;/span&gt; + param1 + &lt;span class=&quot;string&quot;&gt;'&amp;amp;param2='&lt;/span&gt; + param2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bon heu… Autant d’habitude le JS natif est aussi simple, ou tout du moins pas beaucoup plus compliqué que l’équivalent avec jQuery, autant là, je dois avouer que jQuery a gagné :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;$.ajax({
    &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'POST'&lt;/span&gt;,
    &lt;span class=&quot;attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'hhtp://jesmodrazik.fr'&lt;/span&gt;,
    &lt;span class=&quot;attr&quot;&gt;data&lt;/span&gt;: {
        &lt;span class=&quot;attr&quot;&gt;param1&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'value1&amp;amp;'&lt;/span&gt;,
        &lt;span class=&quot;attr&quot;&gt;param2&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'value2'&lt;/span&gt;
    },
    &lt;span class=&quot;attr&quot;&gt;success&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;{
        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(data);
    },
    &lt;span class=&quot;attr&quot;&gt;dataType&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'json'&lt;/span&gt;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mais on va pas se laisser abattre, on peut toujours se débrouiller sans lui !&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ajax&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;options&lt;/span&gt;) &lt;/span&gt;{
    options.async = options.hasOwnProperty(&lt;span class=&quot;string&quot;&gt;'async'&lt;/span&gt;) ? options.async : &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;
    options.headers = options.headers ? options.headers : {};

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; xhr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XMLHttpRequest();

    xhr.open(options.type, options.url, options.async);

    &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys(options.headers).forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;header&lt;/span&gt;) &lt;/span&gt;{
        xhr.setRequestHeader(header, options.headers[header]);
    });

    xhr.onreadystatechange = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (xhr.readyState === xhr.DONE) {
            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (xhr.status &amp;gt;= &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt; &amp;amp;&amp;amp; xhr.status &amp;lt; &lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;) {
                options.success(xhr.responseXML || xhr.responseText, xhr.status);
            } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
                options.error(xhr.status, xhr.statusText);
            }
        }
    }

    xhr.send(options.data || &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;);

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; xhr;
}

ajax({
    &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'POST'&lt;/span&gt;,
    &lt;span class=&quot;attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'http://jesmodrazik.fr'&lt;/span&gt;,
    &lt;span class=&quot;attr&quot;&gt;data&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'param1='&lt;/span&gt; + &lt;span class=&quot;built_in&quot;&gt;encodeURIComponent&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'value1&amp;amp;'&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;'&amp;amp;param2='&lt;/span&gt; + &lt;span class=&quot;built_in&quot;&gt;encodeURIComponent&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'value2'&lt;/span&gt;),
    &lt;span class=&quot;attr&quot;&gt;success&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data, status&lt;/span&gt;) &lt;/span&gt;{
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; json = &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse(data);
        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(data, status);
    },
    &lt;span class=&quot;attr&quot;&gt;error&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;status, statusText&lt;/span&gt;) &lt;/span&gt;{
        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(status, statusText);
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Et voilà ! Cette fonction pourrait être plus poussée, mais en l’état elle couvre
la grande majorité des cas d’utilisation.&lt;/p&gt;
&lt;h2 id=&quot;xmlhttprequest-2-le-retour&quot;&gt;XMLHttpRequest 2, le retour&lt;/h2&gt;
&lt;p&gt;La deuxième version de la spécification XMLHttpRequest apporte son lot d’ajouts
intéressants :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;la possibilité de spécifier un format de réponse, via &lt;code&gt;xhr.responseType&lt;/code&gt;, et
de récupérer la réponse directement au bon format via &lt;code&gt;xhr.response&lt;/code&gt;. Les
formats possibles sont &lt;code&gt;text&lt;/code&gt;, &lt;code&gt;arraybuffer&lt;/code&gt;, &lt;code&gt;blob&lt;/code&gt;, &lt;code&gt;document&lt;/code&gt; ou &lt;code&gt;json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;la possibilité d’envoyer tous les formats précédents à la requête&lt;/li&gt;
&lt;li&gt;l’objet &lt;code&gt;FormData&lt;/code&gt; pour envoyer très simplement des données de formulaire
(et qui gère aussi l’upload !) :&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; form = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;'#myForm'&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FormData(form);

xhr.send(data);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Avec ces évolutions, l’objet &lt;code&gt;XMLHttpRequest&lt;/code&gt; n’est pas refondu en profondeur,
mais se voit ajouter quelques propriétés qui ouvrent de nouvelles possibilités.&lt;/p&gt;
&lt;h2 id=&quot;le-futur-des-requ-tes-asynchrones&quot;&gt;Le “futur” des requêtes asynchrones&lt;/h2&gt;
&lt;p&gt;Avec l’arrivée d’ES2015, des nouveautés concernant les traitements asynchrones
et les requêtes AJAX sont arrivées.&lt;/p&gt;
&lt;p&gt;D’abord, l’API &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch&quot;&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/a&gt;,
basée sur les &lt;code&gt;Promise&lt;/code&gt;s, qui permet de faire une requête GET asynchrone en une
ligne, et d’en traiter le résultat avec du code très lisible :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;fetch(&lt;span class=&quot;string&quot;&gt;'http://jesmodrazik.fr'&lt;/span&gt;)
    .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;response&lt;/span&gt;) &lt;/span&gt;{
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; response.json();
    })
    .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;{
        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(data);
    });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Je vous invite à aller sur le &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch&quot;&gt;MDN&lt;/a&gt;
si vous voulez en savoir plus.&lt;/p&gt;
&lt;p&gt;Enfin, l’arrivée des fonctions asynchrones va permettre d’écrire du code
asynchrone comme si celui-ci était synchrone :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getSomething&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fetch(&lt;span class=&quot;string&quot;&gt;'http://jesmodrazik.fr'&lt;/span&gt;)
        .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;response&lt;/span&gt;) &lt;/span&gt;{
            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; response.json();
        });
}

&lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getSomething&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; data = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; fetch(&lt;span class=&quot;string&quot;&gt;'http://jesmodrazik'&lt;/span&gt;);
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(data);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ici, la fonction est déclarée comme étant asynchrone grâce au mot-clef &lt;code&gt;async&lt;/code&gt;,
ce qui donne accès au mot-clef &lt;code&gt;await&lt;/code&gt; à l’intérieur de la fonction. Ce mot-clef
permet de mettre en pause la fonction le temps qu’une &lt;code&gt;Promise&lt;/code&gt; soit résolue ou
rejettée. Pour en savoir plus à propos des fonctions asynchrones, je vous
conseilles la lecture de &lt;a href=&quot;http://putaindecode.io/fr/articles/js/es2016/async-await/&quot;&gt;cet article&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;pour-finir&quot;&gt;Pour finir&lt;/h2&gt;
&lt;p&gt;Ca commence à devenir répétitif, mais la conclusion reste évidemment toujours
a même : comme pour la manipulation du DOM, du style des éléments de ce même
DOM, des animations, de la délégation d’événements, et j’en passe, il est donc
possible, pour les cas les plus courants, de se passer de jQuery pour faire des
requêtes AJAX. L’important est de se poser la bonne question : est-ce que pour
faire ce dont j’ai besoin, jQuery est nécessaire ? Il est aussi important, même
si on s’est mit au JavaScript avec jQuery, d’apprendre les fondamentaux. La
connaissance du langage est plus valorisante que celle de n’importe quelle
librairie. En effet, connaître le langage permet de s’adapter simplement à
n’importe quelle librairie. Alors que l’inverse n’est pas vrai.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Veille de la semaine - 28/10/2016</title>
      <link>http://jesmodrazik.fr/articles/veille-12/</link>
      <pubDate>Fri, 28 Oct 2016 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://jesmodrazik.fr/articles/veille-12/</guid>
      <author></author>
      <description>&lt;p&gt;Une mise à jour importante de Gecko doit arriver fin 2017, une technique pour
remplacer les librairies de templating JS par des template strings introduites
par ES2015, une technique pour donner l’impression d’un chargement de page plus
rapide aux utilisateurs…&lt;/p&gt;
&lt;h2 id=&quot;browsers&quot;&gt;Browsers&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/mozilla-tech/a-quantum-leap-for-the-web-a3b7174b3c12#.o5t1re9u7&quot;&gt;A Quantum Leap for the Web&lt;/a&gt; :
Mozilla travaille sur une refonte de son moteur Gecko. Leur but est de tirer un
maximum profit des architectures matérielles modernes (notamment les nombreux
coeurs des processeurs) afin d’augmenter significativement les performances du
moteur. Un projet qui devrait voir le jour dans Firefox fin 2017.&lt;/p&gt;
&lt;h2 id=&quot;css&quot;&gt;CSS&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=eIUCPpWBrIU&quot;&gt;HSL: The RGB You’ve Been Waiting For&lt;/a&gt; :
La vidéo du talk de Visnu Pitiyanuvath lors de la JSConf Iceland 2016 dans
lequel celui-ci explique que le format RGB n’est pas fait pour les humains,
contrairement au HSL qui est plus simple à conceptualiser et à manipuler.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://csswizardry.com/2016/10/improving-perceived-performance-with-multiple-background-images/&quot;&gt;Improving Perceived Performance with Multiple Background Images&lt;/a&gt; :
Une technique relativement simple pour donner à l’utilisateur l’impression
qu’une page se charge plus rapidement en remplaçant les images par des dégradés
sur les couleurs principales de celles-ci pendant leur chargement.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://csswizardry.com/2016/10/continue-normalising-your-css/&quot;&gt;Continue Normalising Your CSS&lt;/a&gt; :
La réponse d’Harry Roberts à l’article &lt;a href=&quot;http://shaunrashid.com/2015/09/15/normalize-css-no-more/&quot;&gt;Normalize (CSS) no more&lt;/a&gt;.
Son point de vue est que, contrairement à ce qu’on voudrait faire croire, on
n’utilise pas Normalize pour faire du pixel perfect sur tous les navigateurs et
tous les devices, mais pour se faciliter la vie en tant que développeurs. Ce qui
est un point à ne jamais négliger, tant que ça n’empiête pas sur l’expérience
de l’utilisateur.&lt;/p&gt;
&lt;h2 id=&quot;javascript&quot;&gt;JavaScript&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.keithcirkel.co.uk/es6-template-strings/&quot;&gt;ES6 Template Strings, the Handlebars Killer?&lt;/a&gt; :
L’utilisation des templates strings (arrivées avec ES2015) avec une approche
fonctionnelle, permettent de remplacer une librairie de templating type
Handlebars.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=8aGhZQkoFbQ&quot;&gt;What the heck is the event loop anyway ?&lt;/a&gt; :
La vidéo du talk de Philip Roberts lors de la JSConf EU 2014 à propos de ses
travaux sur l’event loop qui donne sa nature asynchrone au JavaScript. Ce talk
permet de comprendre comment JavaScript fonctionne.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jesmodrazik.fr/articles/veille-12/Add%20document.%7Binteractive,contentLoaded,loaded%7D%20promises&quot;&gt;Add document.{interactive,contentLoaded,loaded} promises&lt;/a&gt; :
Une proposition d’API basée sur des promises pour détecter le DOM-Ready en JS.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/@ericclemmons/teaching-react-without-using-react-a4b87cfd4e87#.vxx8z821e&quot;&gt;Teaching React Without Using React&lt;/a&gt; :
Une introduction à la philosophie de React et de la programmation fonctionnelle
pensée pour des développeurs PHP travaillant principalement avec WordPress. Cet
article démontre très bien que les concepts derrière React sont universels et
peuvent être utilisés en dehors de l’écosystème JS/React.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.freecodecamp.com/seo-vs-react-is-it-neccessary-to-render-react-pages-in-the-backend-74ce5015c0c9#.y4ptbilhm&quot;&gt;SEO vs. React: Web Crawlers are Smarter Than You Think&lt;/a&gt; :
Quand on pense à une SPA, on pense souvent à une mauvaise SEO. Pourtant, cet
article montre que les moteurs de recherche sont capables d’indexer le contenu
d’une SPA aujourd’hui, tant qu’on respecte quelques règles.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Veille de la semaine - 03/09/2016</title>
      <link>http://jesmodrazik.fr/articles/veille-11/</link>
      <pubDate>Sat, 03 Sep 2016 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://jesmodrazik.fr/articles/veille-11/</guid>
      <author></author>
      <description>&lt;p&gt;Une présentation rapide des bases de flexbox, le enregistrements des talks de
React Rally, des astuces sur npm, un peu d’UX, et un processus d’apprentissage
continu.&lt;/p&gt;
&lt;h2 id=&quot;css&quot;&gt;CSS&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/learning-new-stuff/learn-css-flexbox-in-3-minutes-c616c7070672#.pa0ehd7sf&quot;&gt;Learn CSS Flexbox in 3 Minutes&lt;/a&gt; :
une explication rapide et efficace des principaux concepts de Flexbox.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/katiefenn/parker&quot;&gt;Parker&lt;/a&gt; : un outil permettant d’analyser
des feuilles de styles.&lt;/p&gt;
&lt;h2 id=&quot;js&quot;&gt;JS&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/javascript-scene/10-tips-for-better-redux-architecture-69250425af44#.23gb5wk1l&quot;&gt;10 Tips for Better Redux Architecture&lt;/a&gt; :
10 astuces pour mieux comprendre et utiliser Redux.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Fk--XUEorvc&quot;&gt;React Rally Day 1&lt;/a&gt; et &lt;a href=&quot;https://www.youtube.com/watch?v=nI0cQ-2YR1I&quot;&gt;React Rally Day 2&lt;/a&gt; :
les streams des deux journées de la conférence React Rally qui avait lieu les
25 et 26 août dernier. Pour avoir le programme, c’est &lt;a href=&quot;http://www.reactrally.com/schedule&quot;&gt;par ici&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.batmanstream.com/&quot;&gt;11 Simple npm Tricks That Will Knock Your Wombat Socks Off&lt;/a&gt; :
Vérifier les dépendances qui ont besoin d’être mises à jour, figer les versions
des dépendances, aller directement sur la page npm ou github d’un module npm…
Quelques astuces pour mieux profiter des outils mis à disposition par npm.&lt;/p&gt;
&lt;h2 id=&quot;ux&quot;&gt;UX&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/instacart-design/hover-is-dead-long-live-hover-37a89d3795df#.c8u2mvx4f&quot;&gt;Hover is dead. Long live hover.&lt;/a&gt; :
avec la démocratisation des appareils offrant la possibilité d’utiliser une
souris, un touchpad et un écran tactile, les actions qui étaient auparavant
accessibles uniquement au hover doivent être repensées. Cela ne signifie pas
forcément qu’il faut aller jusqu’à ne plus utiliser l’état hover d’un élément,
mais plutôt qu’il faut penser à proposer une alternative adaptée aux écrans
tactiles.&lt;/p&gt;
&lt;h2 id=&quot;autre&quot;&gt;Autre&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.freecodecamp.com/learning-how-to-learn-the-most-important-developer-skill-7bf62dfaf67d#.7szgm2wsm&quot;&gt;Learning How to Learn: The Most Important Developer Skill&lt;/a&gt; :
en tant que développeur, nous devons constamment être en apprentissage. Ce post
détaille un processus d’apprentissage continu.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Veille de la semaine - 26/08/2016</title>
      <link>http://jesmodrazik.fr/articles/veille-10/</link>
      <pubDate>Fri, 26  Aug 2016 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://jesmodrazik.fr/articles/veille-10/</guid>
      <author></author>
      <description>&lt;p&gt;Un cours Egghead sur l’accessibilité, des techniques pour customiser des éléments
de formulaires, des composants React pour faire de la musique et bien d’autres.&lt;/p&gt;
&lt;h2 id=&quot;accessibilit-&quot;&gt;Accessibilité&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://egghead.io/courses/start-building-accessible-web-applications-today&quot;&gt;Start Building Accessible Web Applications Today&lt;/a&gt; :
une liste de vidéos sur les bases de l’accessibilité.&lt;/p&gt;
&lt;h2 id=&quot;css&quot;&gt;CSS&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://wtfforms.com/&quot;&gt;WTF, forms?&lt;/a&gt; : une liste de techniques pour customiser
simplement et efficacement des éléments de formulaires.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.gadgetdaily.xyz/css4-whats-new-that-you-need-to-know/&quot;&gt;CSS4: What’s new that you need to know&lt;/a&gt; :
une liste des nouveautés proposées par CSS “4” (entre guillemets car il n’y  a
pas à proprement parler de version 4 de CSS, comme l’explique l’introduction de
l’article : “CSS4 doesn’t actually exist, not as a monolithic specification
describing what ‘CSS4’ is. What we do have are modules which describe separate
functionality”).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://eliorshalev.github.io/tootik/&quot;&gt;Tootik&lt;/a&gt; : une petite lib CSS pour
afficher des tooltips. Pas de JS là-dedans, c’est basé sur des attributs
&lt;code&gt;data-*&lt;/code&gt;, des pseudo-éléments et la fonction &lt;code&gt;attr()&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;js&quot;&gt;JS&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.js-republic.com/keep-npm-dependencies-up-to-date/&quot;&gt;How to keep his NPM dependencies up-to-date ?&lt;/a&gt; :
4 solutions qui permettent de mettre à jour facilement les dépendances NPM d’un
projet. Mention spécial à updtr qui fonctionne très très bien.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://formidable.com/blog/2016/08/22/make-dope-beats-with-reactjs/&quot;&gt;Make Dope Beats with ReactJS&lt;/a&gt; :
Ken Wheeler a créé un ensemble de composants React basés sur l’API Web Audio et
qui permettent “tout simplement” d’écrire de la musique avec React. Fun et
impressionnant.&lt;/p&gt;
&lt;h2 id=&quot;autres&quot;&gt;Autres&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://frontend.center/&quot;&gt;Frontend Center&lt;/a&gt; : Glen Maddern lance une nouvelle
série de screencasts sur différents sujets front-end fondamentaux. Le premier
épisode est sur Webpack.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Veille de la semaine - 05/08/2016</title>
      <link>http://jesmodrazik.fr/articles/veille-09/</link>
      <pubDate>Fri, 05  Aug 2016 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://jesmodrazik.fr/articles/veille-09/</guid>
      <author></author>
      <description>&lt;p&gt;Cette semaine beaucoup de JS : une proposition pour un nouvel opérateur
“pipeline”, un composant React pour faire des media queries, une bibliothèque
de gestion de couleurs. Mais aussi de l’accessibilité et du CSS.&lt;/p&gt;
&lt;h2 id=&quot;accessibilit-&quot;&gt;Accessibilité&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/aria-in-html/&quot;&gt;Notes on Using ARIA in HTML&lt;/a&gt; : un
document du W3C à destination des développeurs donnant les bonnes pratiques pour
l’utilisation de ARIA dans un document HTML.&lt;/p&gt;
&lt;h2 id=&quot;css&quot;&gt;CSS&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://css-tricks.com/full-width-containers-limited-width-parents/&quot;&gt;Full Width Containers in Limited Width Parents&lt;/a&gt; :
quelques méthodes permettant de placer un élément en full-width dans un parent
qui ne l’est pas lui-même.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ffoodd.fr/les-elements-remplaces/&quot;&gt;Les éléments remplacés&lt;/a&gt; : une
mise au point sur les éléments remplacés et leur capacité (ou non) à avoir des
pseudo-éléments.&lt;/p&gt;
&lt;h2 id=&quot;javascript&quot;&gt;JavaScript&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/@computer.guy/chaining-is-not-the-answer-6c4143ebb64d#.sgbqwo5cu&quot;&gt;Chaining Is Not The Answer&lt;/a&gt; :
chaîner des méthodes propres à une bibliothèque ne résoud pas les problèmes
de variables temporaires. Dès qu’on souhaite mélanger plusieurs bibliothèques,
le chaining n’est plus possible. Le pipeline operator a pour but de résoudre ce
problème.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ashleygwilliams.github.io/node-live/#1&quot;&gt;You don’t know npm&lt;/a&gt; : les
slides du talk de Ashley G. Williams à la Node Live, sur les petites choses à
savoir sur npm.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kentcdodds/p-s&quot;&gt;p-s&lt;/a&gt; : un module npm permettant
d’écrire des scripts npm sans les inconvénients du JSON.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ReactTraining/react-media&quot;&gt;react-media&lt;/a&gt; : un composant React
pour faire des media queries.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.checkman.io/please/&quot;&gt;Please.js&lt;/a&gt; : une bibliothèque de gestion de
couleurs en JS.&lt;/p&gt;
&lt;h2 id=&quot;autre&quot;&gt;Autre&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.freecodecamp.com/imperative-vs-declarative-programming-283e96bf8aea#.3870ns3mb&quot;&gt;Imperative vs Declarative Programming&lt;/a&gt; :
une explication précise de ce qui différencie la programmation impérative de la
programmation déclarative.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Faire des carrés</title>
      <link>http://jesmodrazik.fr/articles/css-carre/</link>
      <pubDate>Wed, 03  Aug 2016 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://jesmodrazik.fr/articles/css-carre/</guid>
      <author></author>
      <description>&lt;p&gt;Quoi de plus simple qu’un carré ? Pourtant, comment dire à un élément HTML
que sa hauteur doit être égale à sa largeur ?&lt;/p&gt;
&lt;h2 id=&quot;la-m-thode-tout-en-dur-&quot;&gt;La méthode “tout en dur”&lt;/h2&gt;
&lt;p&gt;C’est la méthode qui est la plus simple et la plus inutile en même temps :&lt;/p&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;15557&quot; data-slug-hash=&quot;dXjrGm&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;JesmoDrazik&quot; data-embed-version=&quot;2&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/JesmoDrazik/pen/dXjrGm/&quot;&gt;Fixed width and height square&lt;/a&gt; by Cyrille Perois (&lt;a href=&quot;http://codepen.io/JesmoDrazik&quot;&gt;@JesmoDrazik&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Alors oui, ça fait un carré, c’est indéniable. Pourtant, rare sont les cas dans
lesquels ont peut se permettre de donner une taille fixe à un élément
aujourd’hui. On a plus souvent besoin que l’élément soit un carré, et le reste
même quand celui-ci est redimensionné.&lt;/p&gt;
&lt;p&gt;Mais il n’existe pas de moyen simple et évident en CSS pour donner à un élément
une hauteur égale à sa largeur à tout moment. Quelque chose comme ceci… :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-css&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.Square&lt;/span&gt; {
    &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: block;
    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;25%&lt;/span&gt;;
    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;computed-property&lt;/span&gt;(width);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… qui prendrait la valeur calculée de &lt;code&gt;width&lt;/code&gt; pour l’appliquer à &lt;code&gt;height&lt;/code&gt;. Il
nous faut donc une solution pour “écouter” la largeur de notre élément afin d’y
appliquer une hauteur égale.&lt;/p&gt;
&lt;h2 id=&quot;la-m-thode-javascript&quot;&gt;La méthode JavaScript&lt;/h2&gt;
&lt;p&gt;La solution qui vient immédiatement en tête est d’utiliser du JS pour écouter
l’événement &lt;code&gt;resize&lt;/code&gt; sur la &lt;code&gt;window&lt;/code&gt;, lire la &lt;code&gt;width&lt;/code&gt; de l’élément et
l’appliquer à sa &lt;code&gt;height&lt;/code&gt; :&lt;/p&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;15557&quot; data-slug-hash=&quot;mEjPPQ&quot; data-default-tab=&quot;js,result&quot; data-user=&quot;JesmoDrazik&quot; data-embed-version=&quot;2&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/JesmoDrazik/pen/mEjPPQ/&quot;&gt;Squares using JavaScript&lt;/a&gt; by Cyrille Perois (&lt;a href=&quot;http://codepen.io/JesmoDrazik&quot;&gt;@JesmoDrazik&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;(il serait évidemment une bonne idée d’utiliser un
&lt;a href=&quot;https://lodash.com/docs#debounce&quot;&gt;&lt;code&gt;debounce&lt;/code&gt;&lt;/a&gt; pour ne pas lancer la fonction un
trop grand nombre de fois, mais le but est de rester simple ici)&lt;/p&gt;
&lt;p&gt;Cette solution fonctionne, mais le fait que mes éléments soient carrés devrait
être laissé à la responsabilité de CSS. En effet, mon JS peut être bloqué par
n’importe quel traitement, erreur, voir même être désactivé par l’utilisateur
(c’est rare mais ça existe). Une solution CSS only serait préférable.&lt;/p&gt;
&lt;h2 id=&quot;la-m-thode-je-connais-css-&quot;&gt;La méthode “je connais CSS”&lt;/h2&gt;
&lt;p&gt;En me baladant sur un site en cours de développement chez Wandi, j’ai remarqué
que des éléments d’une page étaient carrés, et le restaient lorsqu’on
redimensionne la fenêtre du navigateur. Je suis allé voir le JS associé, pour
m’assurer qu’un &lt;code&gt;debounce&lt;/code&gt; était appliqué, afin d’optimiser les performances.
A ma grande surprise, aucun JS n’était de la partie, tout était fait en CSS.
J’ai donc demandé au collègue qui s’est chargé du développement de ce composant
sa petite astuce. Et celle-ci repose sur le simple fait suivant : lorsqu’on
applique une valeur en pourcentage à un padding, celle-ci se base sur la largeur
de l’élément englobant.&lt;/p&gt;
&lt;p&gt;Il existe donc bien un moyen de donner à un élément une hauteur égale à sa
largeur, et ce de manière fluide : appliquer un &lt;code&gt;padding-bottom: 100%&lt;/code&gt; à un
pseudo-élément.&lt;/p&gt;
&lt;p&gt;&lt;p data-height=&quot;300&quot; data-theme-id=&quot;15557&quot; data-slug-hash=&quot;GqBoGd&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;JesmoDrazik&quot; data-embed-version=&quot;2&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/JesmoDrazik/pen/GqBoGd/&quot;&gt;CSS only square&lt;/a&gt; by Cyrille Perois (&lt;a href=&quot;http://codepen.io/JesmoDrazik&quot;&gt;@JesmoDrazik&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;
&lt;script async src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Et voici. Je tire trois enseignements de cette expérience :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Comment faire des carrés en CSS !&lt;/li&gt;
&lt;li&gt;Lire la documentation, comme toujours, est primordial&lt;/li&gt;
&lt;li&gt;Le partage de connaissances, lui aussi, est primordial. Je remercie donc ce
collègue (qui est apprenti, vous avez des choses à apprendre de vos apprentis)
d’avoir partagé ceci avec moi&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Veille de la semaine - 29/07/2016</title>
      <link>http://jesmodrazik.fr/articles/veille-08/</link>
      <pubDate>Fri, 29 Jul 2016 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://jesmodrazik.fr/articles/veille-08/</guid>
      <author></author>
      <description>&lt;p&gt;Cette semaine une mixin Sass pour émuler un &lt;code&gt;(min|max-font-size)&lt;/code&gt;, un nouvel
outil dévoilé par Facebook pour démarrer un projet React, un nouveau livre de la
collection A Book Apart sur SVG, des plugins pour Atom et bien d’autres choses.&lt;/p&gt;
&lt;h2 id=&quot;atom&quot;&gt;Atom&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mehcode/awesome-atom&quot;&gt;Awesome Atom&lt;/a&gt; : une sélection de
plugins Atom bien pratiques.&lt;/p&gt;
&lt;h2 id=&quot;css&quot;&gt;CSS&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/CSSLint/csslint/issues/668&quot;&gt;CSSLint + Stylelint&lt;/a&gt; : CSSLint
va merger avec Stylelint, et ils ont besoin d’aide pour ça.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://css-tricks.com/snippets/sass/viewport-sized-typography-minimum-maximum-sizes/&quot;&gt;Viewport Sized Typography with Minimum and Maximum Sizes&lt;/a&gt; :
Eduardo Bouças nous offre sa mixin Sass pour pouvoir déclarer une &lt;code&gt;font-size&lt;/code&gt;
avec des unités de viewport (&lt;code&gt;vw&lt;/code&gt;, &lt;code&gt;vh&lt;/code&gt;, &lt;code&gt;vmax&lt;/code&gt; et &lt;code&gt;vmin&lt;/code&gt;) tout en spécifiant
une taille minimum et maximum.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://css-tricks.com/learning-cope-microservices/&quot;&gt;Learning to COPE with Microservices&lt;/a&gt; :
un retour d’expérience d’Eduardo Bouças (encore lui !) sur le développement
d’un système COPE (Create Once, Publish Everywhere) en mettant en place une
couche d’API et des microservices sur un CMS.&lt;/p&gt;
&lt;h2 id=&quot;js&quot;&gt;JS&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/facebookincubator/create-react-app&quot;&gt;create-react-app&lt;/a&gt; :
un utilitaire développé par Facebook (donc officiel) qui permet de créer des
applications React sans avoir à s’occuper de la mise en place de toutes les
dépendances à la main (Webpack, Babel, les presets/loaders qui vont avec…)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/@xjamundx/getting-started-with-async-await-b66385983875#.1r8qaxstz&quot;&gt;Getting Started with Async/Await&lt;/a&gt; :
une introduction aux fonctions asynchrones et au mot clef &lt;code&gt;await&lt;/code&gt; en JS.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://fr.slideshare.net/weaverryan/finally-professional-frontend-dev-with-reactjs-webpack-symfony-symfony-cat-2016&quot;&gt;Finally, Professional Frontend Dev with ReactJS, WebPack &amp;amp; Symfony&lt;/a&gt; :
un talk donné lors de la Symfony Cat 2016 à propos de la mise en place de React
et de Webpack dans un environnement Symfony.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/userpixel/micromustache&quot;&gt;Micromustache&lt;/a&gt; : la bibliothèque
de templating &lt;a href=&quot;https://github.com/janl/mustache.js&quot;&gt;Mustache&lt;/a&gt; allégée de
quelques fonctionnalités pour proposer l’essentiel (object + template = HTML)
avec des performances accrues.&lt;/p&gt;
&lt;h2 id=&quot;performances&quot;&gt;Performances&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://jakearchibald.com/2016/performance-benefits-of-rel-noopener/&quot;&gt;The performance benefits of rel=noopener&lt;/a&gt; :
un topo sur les bienfaits de l’utilisation de  &lt;code&gt;rel=&amp;quot;noopener&amp;quot;&lt;/code&gt; sur les liens
externes.&lt;/p&gt;
&lt;h2 id=&quot;programmation-fonctionnelle&quot;&gt;Programmation fonctionnelle&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/@cscalfani/goodbye-object-oriented-programming-a59cda4c0e53#.5fne8z4l1&quot;&gt;Goodbye, Object Oriented Programming&lt;/a&gt; :
Une réflexion sur les mauvais aspects de la POO, et comment les éviter grâce à
la programmation fonctionnelle.&lt;/p&gt;
&lt;h2 id=&quot;svg&quot;&gt;SVG&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://abookapart.com/products/practical-svg&quot;&gt;Practical SVG&lt;/a&gt; : écrit par
Chris Coyier (CSS-tricks), ce livre de la collection A Book Apart explique
comment se servir de SVG au jour le jour, mais aussi comment créer un système
d’icônes ou encore comment faire des animations.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Veille de la semaine - 22/07/2016</title>
      <link>http://jesmodrazik.fr/articles/veille-07/</link>
      <pubDate>Fri, 22 Jul 2016 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://jesmodrazik.fr/articles/veille-07/</guid>
      <author></author>
      <description>&lt;p&gt;Des sujets assez vaste pour cette semaine. Du CSS, des libs JS, un terminal
basé sur des technos web, du SVG, de l’accessibilité…&lt;/p&gt;
&lt;h2 id=&quot;accessibilit-&quot;&gt;Accessibilité&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.udacity.com/course/web-accessibility--ud891&quot;&gt;Web Accessibility - Developing with Empathy&lt;/a&gt; :
un cours en ligne sur l’accessibilité, fais par des gens de chez Google.&lt;/p&gt;
&lt;h2 id=&quot;css&quot;&gt;CSS&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zachleat.com/web/comprehensive-webfonts/&quot;&gt;A Comprehensive Guide to Font Loading Strategies&lt;/a&gt; :
une liste très complète des différentes manières de charger des web fonts, avec
des avantages et des inconvénients pour chaque technique.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/filipelinhares/ress&quot;&gt;Ress&lt;/a&gt; : un compromis entre un reset css
et Normalize.css, basé sur ce dernier.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://css-tricks.com/considerations-styling-modal/&quot;&gt;Considerations for Styling a Modal&lt;/a&gt; :
des aspects liés à l’UX et à l’accessibilité à considérer lorsqu’on développe
une modale, et comment les gérer.&lt;/p&gt;
&lt;h2 id=&quot;html&quot;&gt;HTML&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://eager.io/blog/everything-I-know-about-the-script-tag/&quot;&gt;Everything I Know About The Script Tag&lt;/a&gt; :
Quelques secrets à propos de la balise &lt;code&gt;script&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;js&quot;&gt;JS&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://zingchart.github.io/zingtouch/&quot;&gt;ZingTouch&lt;/a&gt; : une librairie qui permet
de gérer les événements liés aux écrans tactiles, et même de définir nos propres
gestures.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/juliangarnier/anime&quot;&gt;anime.js&lt;/a&gt; : une librairie d’animation
légère et performante.&lt;/p&gt;
&lt;h2 id=&quot;outils&quot;&gt;Outils&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://hyperterm.org/&quot;&gt;Hyperterm&lt;/a&gt; : un terminal développé avec des technos web
(c’est basé sur Electron), extensible via du JS et du CSS.&lt;/p&gt;
&lt;h2 id=&quot;svg&quot;&gt;SVG&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://surbhioberoi.com/a-complete-guide-to-svg/&quot;&gt;How to Design, Code, and Animate SVGs&lt;/a&gt; :
une introduction au format d’image SVG et aux différentes manières existantes
pour l’animer.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>CSS Paris - 5ème édition</title>
      <link>http://jesmodrazik.fr/articles/css-paris-5/</link>
      <pubDate>Tue, 05 Jul 2016 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://jesmodrazik.fr/articles/css-paris-5/</guid>
      <author></author>
      <description>&lt;p&gt;Hier soir, c’était la cinquième édition du meetup
&lt;a href=&quot;http://www.meetup.com/fr-FR/CSS-Paris/events/232219450/&quot;&gt;CSS Paris&lt;/a&gt;. C’était la
première fois que j’assistais à cet événement.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;C’est &lt;a href=&quot;http://www.ekino.com/&quot;&gt;Ekino&lt;/a&gt; qui a accueillit ce meetup dans ses locaux.
Merci à eux pour l’accueil !&lt;/p&gt;
&lt;p&gt;3 talks étaient au programme :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;10 astuces SVG qui vont vous sauver la vie&lt;/strong&gt; par
&lt;a href=&quot;https://twitter.com/iamvdo&quot;&gt;@iamvdo&lt;/a&gt; : un talk que Vincent a déjà donné lors de
la dernière &lt;a href=&quot;http://www.kiwiparty.fr/&quot;&gt;Kiwi Party&lt;/a&gt;, dans lequel il  nous donne
10 astuces pour mieux utiliser et mieux comprendre SVG, qui est un langage
relativement vieux (à l’échelle du web) et pourtant encore assez obscur pour de
nombreuses personnes. Le format meetup lui a toutefois permis d’approfondir un
peu plus chaque astuce, puisque le temps ne lui était pas compté. Un talk très
intéressant.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;La technique des Fab Four&lt;/strong&gt; par
&lt;a href=&quot;https://twitter.com/HTeuMeuLeu&quot;&gt;@HTeuMeuLeu&lt;/a&gt; : comment réaliser une grille
responsive dans un email sans media queries ni flexbox ? Défi relevé par Rémi et
sa fameuse
&lt;a href=&quot;http://emails.hteumeuleu.fr/2016/02/fab-four-emails-responsive-sans-media-queries/&quot;&gt;technique des « Fab Four »&lt;/a&gt;
qui, par un astucieux mélange de &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;calc()&lt;/code&gt;, &lt;code&gt;min-width&lt;/code&gt; et &lt;code&gt;max-width&lt;/code&gt;
permet de créer des emails responsives très simplement. Un spectateur s’est
inquiété de la santé mentale de Rémi, qui a dit qu’il se portait très bien, et
aimait même ça.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Web Animation Performance&lt;/strong&gt; et &lt;strong&gt;Comment faire des Layout Animations sans
faire de Layout Animation ?&lt;/strong&gt; par
&lt;a href=&quot;https://twitter.com/HarrisFreddy&quot;&gt;@HarrisFreddy&lt;/a&gt; : d’abord un rappel du
fonctionnement du moteur de rendu des navigateurs web (phases de layout, de
paint et de composite) et des impacts de la manipulation du document sur les
performances de rendu lors d’une animation, Freddy nous a parlé de la technique
FLIP (pour First Last Invert Play) pour faire des animations sur le layout de
manière performante. En gros, le principe est de partir de l’état initial, puis
de passer à l’état final sans faire d’animation, puis de revenir à l’état
initial. De cette manière, la position initiale et la position finale sont
connues, et l’animation peut se faire via un &lt;code&gt;transform&lt;/code&gt;, qui ne fait entrer en
jeu que la phase composite et le GPU et est donc beaucoup plus performante
qu’une animation sur le &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt; ou autre propriété de layout. Pour plus
d’informations, vous pouvez aller voir la vidéo du talk
&lt;a href=&quot;https://www.youtube.com/watch?v=qrbbD-1ET14&quot;&gt;Web Animation Performance&lt;/a&gt; donné
par Freddy à &lt;a href=&quot;http://bestofweb.paris/&quot;&gt;Best of Web&lt;/a&gt; le mois dernier.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Voilà pour ce retour sur le premier meetup auquel j’assiste. Ce fut une très
bonne expérience. Je vous conseille de
&lt;a href=&quot;http://www.meetup.com/fr-FR/CSS-Paris/&quot;&gt;vous y inscrire&lt;/a&gt;. De nombreux autres
meetup existent, n’hésitez pas à en rejoindre plusieurs !&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Veille de la semaine - 01/04/2016</title>
      <link>http://jesmodrazik.fr/articles/veille-06/</link>
      <pubDate>Fri, 01 Apr 2016 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://jesmodrazik.fr/articles/veille-06/</guid>
      <author></author>
      <description>&lt;p&gt;Cette semaine du JS testable, du React, du SVG, des Custom Properties CSS et
une démo bluffante de synthétiseur basé sur l’API Web Audio.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.toptal.com/javascript/writing-testable-code-in-javascript&quot;&gt;Writing testable code in JavaScript: a brief overview&lt;/a&gt; :
des conseils pour écrire du JavaScript testable.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://devnacho.com/2016/03/20/how-airbnb-uses-react/&quot;&gt;How Airbnb uses React&lt;/a&gt; :
une interview de Leland Richardson, Software Engineer chez Airbnb à propos de
l’utilisation de React et de son écosystème dans l’entreprise.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://fvsch.com/code/svg-icons/how-to/&quot;&gt;How to work with SVG icons&lt;/a&gt; : un guide
complet sur les bases de l’utilisation de SVG pour afficher des îcones. Au menu,
comment faire un sprite SVG, comment appliquer efficacement du CSS aux icônes,
comment inclure les icônes pour obtenir un maximum de performances.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jakearchibald.com/2016/css-loading-with-custom-props/&quot;&gt;Control CSS loading with custom properties&lt;/a&gt; :
une expérimentation de Jake Archibald pour définir un ordre de chargement des
CSS en utilisant les Custome Properties. Cet article fait suite au précédent sur
&lt;a href=&quot;https://jakearchibald.com/2016/link-in-body/&quot;&gt;l’utilisation de &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; dans &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jakearchibald.com/2016/link-in-body/&quot;&gt;Viktor NV-1 Synthesizer&lt;/a&gt; : un
synthétiseur fonctionnel basé sur l’API Web Audio. Impresionnant et intéressant.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Veille de la semaine - 25/03/2016</title>
      <link>http://jesmodrazik.fr/articles/veille-05/</link>
      <pubDate>Fri, 25 Mar 2016 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://jesmodrazik.fr/articles/veille-05/</guid>
      <author></author>
      <description>&lt;p&gt;Cette semaine un cours sur les fondamentaux de React, des animations avec React,
un état de l’art subjectif sur le monde JavaScript, une étude sur l’impact des
mixins et du &lt;code&gt;@extend&lt;/code&gt; de Sass sur les performances. Enfin, un talk TEDx qui n’a
rien de technique, mais qui est très intéressant.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://courses.reactjsprogram.com/courses/reactjsfundamentals&quot;&gt;ReactJS Fundamentals&lt;/a&gt; :
un cours en ligne gratuit et très bien fait sur les fondamentaux de React. Vous
devriez commencer par là si vous débutez avec React et son écosystème.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://egghead.io/playlists/react-react-animation-using-react-motion&quot;&gt;Make things move in React with react-motion&lt;/a&gt; :
une petite série de vidéos à propos de react-motion, un module utilisant les
ReactTransitionGroup pour animer des composants React.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/javascript-and-opinions/state-of-the-art-javascript-in-2016-ab67fc68eb0b#.y2drossky&quot;&gt;State of the Art JavaScript in 2016&lt;/a&gt; :
un état de l’art de l’univers JavaScript de nos jours. C’est subjectif, mais ça
reflète très bien les technos JS qui ont le vent en poupe.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://csswizardry.com/2016/02/mixins-better-for-performance/&quot;&gt;Mixins Better for Performance&lt;/a&gt; :
Harry Roberts prouve pas A+B qu’avec Sass les mixins sont meilleures que
&lt;code&gt;@extend&lt;/code&gt; pour les performances.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ted.com/talks/emilie_wapnick_why_some_of_us_don_t_have_one_true_calling?language=fr&quot;&gt;Pourquoi certains d’entre nous n’ont pas de vocation&lt;/a&gt; :
une conférence TEDx à propos des gens qui ont beaucoup de centres d’intérêts,
donc pas de vocation à proprement parler, et qui sont souvent mis de côté par
notre société qui a tendance à idéaliser la vocation.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.dustinkirkland.com/2016/03/ubuntu-on-windows.html?m=1&quot;&gt;Windows 10 est maintenant capable d’exécuter des binaires Linux&lt;/a&gt; :
grâce au travail conjoint des équipes de Canonical (l’entreprise derrière
Ubuntu) et de Microsoft, Windows 10 est maintenant capable d’exécuter du bash,
entre autre. Ce n’est disponible que pour les gens qui sont inscrits au
programme “insider” pour le moment. La mise à jour pour le grand public est
prévue cet été.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Veille de la semaine - 18/03/2016</title>
      <link>http://jesmodrazik.fr/articles/veille-04/</link>
      <pubDate>Fri, 18 Mar 2016 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://jesmodrazik.fr/articles/veille-04/</guid>
      <author></author>
      <description>&lt;p&gt;Cette semaine au programme : une très bonne introduction aux promises d’ES6, des
attributs permettant de précharger des ressources, des images responsives et un
retour d’expérience sur une refonte de site avec React.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jamesknelson.com/grokking-es6-promises-the-four-functions-you-need-to-avoid-callback-hell/&quot;&gt;Introduction to ES6 Promises – The Four Functions You Need To Avoid Callback Hell&lt;/a&gt; :
dans cet article, l’auteur explique les bienfaits des promises et montre comment
passer petit à petit d’un code illisible à base de callback imbriqués à un code
très propre utilisant des promises. Un must read pour qui ne comprend rien aux
promises.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lvh.io/posts/queryselectorall-from-an-element-probably-doesnt-do-what-you-think-it-does.html#&quot;&gt;querySelectorAll from an element probably doesn’t do what you think it does&lt;/a&gt; :
on pourrait croire que &lt;code&gt;querySelectorAll&lt;/code&gt;, appliquée à un élément, limite la
recherche aux enfants de celui-ci, sans traverser tout le DOM. Ce n’est pas le
cas.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=6KUXRuNzBwM&amp;amp;feature=youtu.be&amp;amp;t=73&quot;&gt;Replay sur la refonte front end de 6play fr - Kenny Dits&lt;/a&gt; :
retour d’expérience de la part du responsable études et développement de M6Web
sur la refonte front-end de 6play.fr. Il y explique le cheminement qui a mené
aux choix des technos faits par son équipe, et comment ils ont pu mener à bien
ce gros projet.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://css-tricks.com/prefetching-preloading-prebrowsing/&quot;&gt;Prefetching, preloading, prebrowsing&lt;/a&gt; :
il est question ici de web perf. De nouvelles valeurs de l’attribut &lt;code&gt;rel&lt;/code&gt; de la
balise &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; nous permettent de précharger des ressources ou d’entamer une
connexion avec un serveur avant même d’en avoir besoin. Le but est d’accélérer
les temps de chargements lorsque la ressource sera effectivement demandée par le
client.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jakearchibald.com/2015/anatomy-of-responsive-images/&quot;&gt;The anatomy of responsive images&lt;/a&gt; :
excellent article, bien illustré, de Jake Archibald sur les images responsives.
Il aborde différents cas de figures pour couvrir une grande partie des cas
d’utilisation des images responsives.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Résoudre le problème de crochet et d'accolade fermant(e) sur Atom</title>
      <link>http://jesmodrazik.fr/articles/atom-crochet-accolade-fermant/</link>
      <pubDate>Tue, 01 Mar 2016 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://jesmodrazik.fr/articles/atom-crochet-accolade-fermant/</guid>
      <author></author>
      <description>&lt;p&gt;Lorsqu’on utilise un clavier français (mais pas que) sur Atom, l’éditeur de code
initié par Github, il est impossible de taper un crochet fermant ou une accolade
fermante. Heureusement, il existe une solution.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit 10/11/2016&lt;/strong&gt; : La version 1.12.0 d’Atom est sortie aujourd’hui, et parmi
les nouveautés qu’elle propose (voir les
&lt;a href=&quot;https://github.com/atom/atom/releases/tag/v1.12.0&quot;&gt;notes de release sur Github&lt;/a&gt;)
, on trouve le support de tous les layouts de claviers. De leur propre aveux,
c’est une fonctionnalité qui était demandée depuis longtemps (2014). L’équipe a
toutefois écrit un
&lt;a href=&quot;http://blog.atom.io/2016/10/17/the-wonderful-world-of-keyboards.html&quot;&gt;article sur son blog&lt;/a&gt;
pour expliquer pourquoi cette fonctionnalité a été complexe à implémenter
efficacement. Le problème est donc résolu est il n’y a plus besoin d’installer
de package pour qu’Atom gère le layout de clavier français.&lt;/p&gt;
&lt;p&gt;Le problème est connu depuis 2014 et est lié à la gestion de la touche “ALT GR”,
comme l’indique &lt;a href=&quot;https://github.com/atom/atom-keymap/issues/35&quot;&gt;cette issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En parcourant les commentaires, on tombe sur pas mal de solutions plus ou moins
propres qui requièrent d’éditer un fichier de configuration. J’en ai essayé
plusieurs, sans succès.&lt;/p&gt;
&lt;p&gt;Je suis finalement tombé sur le package
&lt;a href=&quot;https://atom.io/packages/keyboard-localization&quot;&gt;keyboard-localization&lt;/a&gt;, qui
permet de régler ces soucis sur de nombreuses dispositions de claviers, dont le
bon vieux AZERTY français. Il suffit d’installer le package, puis d’aller dans
la configuration de celui-ci et de sélectionner la langue qui vous convient
(fr_FR dans mon cas, par exemple).&lt;/p&gt;
&lt;p&gt;Voilà. C’est certes un peu drôle d’avoir à installer un package pour avoir une
gestion correcte de son clavier, mais les développeurs d’Atom sont au courant
donc il y a de fortes chances qu’une mise à jour réglant le problème finisse par
arriver.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Veille de la semaine - 05/02/2016</title>
      <link>http://jesmodrazik.fr/articles/veille-03/</link>
      <pubDate>Fri, 05 Feb 2016 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://jesmodrazik.fr/articles/veille-03/</guid>
      <author></author>
      <description>&lt;p&gt;Cette semaine beaucoup de Javascript. Le draft de la prochaine specification ES2016 (ES7), la première RC d’ESLint 2.0.0 et d’autres choses !&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eslint.org/blog/2016/02/eslint-v2.0.0-rc.0-released&quot;&gt;ESLint v2.0.0-rc.0 released&lt;/a&gt; : la prochaine version majeure d’ESLint est en Release Candidate. Cette version apporte des nouveautés telles que la configuration automatique (en analysant votre code actuel pour en ressortir les patterns les plus récurrents), le code path analysis sur lequel les règles pourront s’appuyer pour mieux analyser notre code, ou encore une meilleure gestion des différentes versions d’ECMAScript et des variables globales associées. Une très bonne évolution qui ne devrait plus tarder à être stable.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://featurejs.com/&quot;&gt;Feature.js&lt;/a&gt; : une bibliothèque de features detection qui tient dans 1kb et qui permet de tester l’existence de 27 API.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tc39.github.io/ecma262/&quot;&gt;Draft spec ECMAScript 2016&lt;/a&gt; : le draft de la prochaine spécification d’ECMAScript, ES2016 (aussi appelée ES7). Un gros pavé à parcourir pour avoir un aperçu des nouveautés. Ou à lire entièrement avec une bonne aspirine pour connaître tout le détail.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.capitalone.io/blog/why-is-everyone-talking-about-isomorphic-javascript/&quot;&gt;Why Everyone is Talking About Isomorphic / Universal JavaScript and Why it Matters&lt;/a&gt; : on parle de plus en plus de JS isomorphique / universel, c’est à dire d’un même code JS qu’il est possible d’exécuter à la fois côté client et côté serveur. Les raisons sont multiples : une meilleure gestion des moteurs de recherche, de meilleures performances au chargement, une seule base de code à maintenir…&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://24ways.org/2015/how-tabs-should-work/&quot;&gt;How Tabs Should Work&lt;/a&gt; : les onglets sont des éléments d’interface relativement simples, si on s’arrête à leur fonctionnement basique (je clique sur l’onglet, le contenu associé s’affiche, les autres sont cachés). Pourtant, pour que ceux-ci soient accessibles et réellement utilisables, de nombreux aspects sont à prendre en compte : faire pointer l’URL sur l’élément affiché, initialiser correctement l’élément affiche en fonction de l’URL, gérer le shit-click et le clic droit, ajouter des rôles ARIA…&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kyusuf.com/post/completely-css-custom-checkbox-radio-buttons-and-select-boxes&quot;&gt;Completely CSS: Custom checkboxes, radio buttons and select boxes&lt;/a&gt; : on finit avec des composants de formulaires custom uniquement avec du CSS. Nous savons bien qu’utiliser du JS pour arriver à ce résultat est une plaie, et que ça ne fonctionne jamais complètement (niveau accessibilité surtout). Avec ces techniques CSS on garde tous les comportements présents nativement, on ne fait que modifier le style.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Veille de la semaine - 29/01/2016</title>
      <link>http://jesmodrazik.fr/articles/veille-02/</link>
      <pubDate>Fri, 29 Jan 2016 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://jesmodrazik.fr/articles/veille-02/</guid>
      <author></author>
      <description>&lt;p&gt;Cette semaine 6 liens au menu. Du React, du Grid Layout, un service de polyfills, du WTF du côté de npm et des nouveautés sur Chrome et Firefox.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://camjackson.net/post/9-things-every-reactjs-beginner-should-know&quot;&gt;9 things every React.js beginner should know&lt;/a&gt; : des conseils pertinents pour démarrer avec React.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://putaindecode.io/fr/articles/css/grilles/grid-layout/&quot;&gt;Introduction à Grid Layout&lt;/a&gt; : une introduction au module CSS Grid Layout qui nous permettra bientôt de créer nos grilles très simplement.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cdn.polyfill.io/v2/docs/&quot;&gt;Polyfill service&lt;/a&gt; : un service permettant de récupérer uniquement les polyfill dont le navigateur de l’utilisateur a besoin pour faire tourner nos sites. Seul inconvénient : il se base sur le User Agent. C’est un choix à faire.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/npm/npm/issues/11283#issuecomment-175246823&quot;&gt;Progress bar noticeably slows down npm install&lt;/a&gt; : depuis sa version 3, npm propose une barre de progression lorsqu’on installe un module. Vu comme une évolution bien appréciable lors de sa sortie, celle-ci ralentit en fait assez fortement les installations de module (entre 20 et 50% de temps supplémentaire). Un utilisateur explique le pourquoi du comment.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://v8project.blogspot.nl/2016/01/v8-release-49.html&quot;&gt;V8 release 4.0&lt;/a&gt; : la nouvelle version de V8, le moteur Javascript de Chrome, implémentera 91% des nouveautés d’ES6/2015.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.fxsitecompat.com/en-CA/versions/46/&quot;&gt;Firefox 46 est de sortie sur la developer edition&lt;/a&gt; : la principale nouveauté de cette version est qu’elle affiche comme non sécurisées les pages qui comportent un formulaire de login et qui ne sont pas servies en HTTPS.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Veille de la semaine - 22/01/2016</title>
      <link>http://jesmodrazik.fr/articles/veille-01/</link>
      <pubDate>Fri, 22 Jan 2016 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://jesmodrazik.fr/articles/veille-01/</guid>
      <author></author>
      <description>&lt;p&gt;Ça fait assez longtemps que j’hésite à le faire, et donc assez longtemps que je
ne le fais pas. Les raisons sont multiples : la sensation de ne pas être
forcément légitime, le fait que d’autres le fassent déjà très bien, entre autres.
Pourtant aujourd’hui je décide finalement de me lancer, et de partager ma veille
(technologique, mais pas que) de manière hebdomadaire (en tous cas on va le
tenter comme ça). C’est partit.&lt;/p&gt;
&lt;h2 id=&quot;l-o-tout-a-commenc-&quot;&gt;Là où tout a commencé&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://coulisses.pw/post/135701210348/c%C3%A9tait-au-programme-design-de-soi-valoriser&quot;&gt;“Design de soi : valoriser son identité et son expertise sur le web”&lt;/a&gt; :
dans cette conférence donnée lors du dernier Paris Web,
&lt;a href=&quot;http://marieguillaumet.com/&quot;&gt;Marie Guillaumet&lt;/a&gt; explique comment se présenter
et communiquer sur son soi professionnel sur le web. Ce sont les conseils et
réponses aux questions les plus courantes qu’elle donne qui m’ont fait franchir
le cap. Faites pareil !&lt;/p&gt;
&lt;h2 id=&quot;les-liens-&quot;&gt;Les liens !&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.hteumeuleu.fr/la-publicite-n-est-pas-le-modele-economique-du-web/&quot;&gt;“La publicité n’est pas le modèle économique du web”&lt;/a&gt; :
on parle beaucoup de la guerre entre annonceurs et ad-blockers. Pourtant la pub
n’est pas indispensable au web.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/@housecor/why-i-left-gulp-and-grunt-for-npm-scripts-3d6853dd22b8#.385wcm8ng&quot;&gt;“Why I left Gulp and Grunt for npm scripts”&lt;/a&gt; :
dans cet article, l’auteur expose les raisons pour lesquelles il a décidé de
laisser de côté les tasks runners JS au profit des scripts npm, ainsi que les
avantages et inconvénients que ces derniers présentent, mais aussi comment
contourner les problèmes qu’ils peuvent poser. La phrase suivante résume
largement l’article : “I’ve found Gulp and Grunt to be unnecessary abstractions.
npm scripts are plenty powerful and often easier to live with.”&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://tobiasahlin.com/blog/how-to-animate-box-shadow/&quot;&gt;“How to animate box-shadow”&lt;/a&gt; :
ici l’auteur atire notre attention sur le fait qu’il n’est pas bon d’animer
n’importe quelle propriété CSS, en montrant que pour arriver au même résultat
mais avec de meilleures performances, il vaut mieux animer la propriété &lt;code&gt;opacity&lt;/code&gt;
appliquée à un pseudo-élément que &lt;code&gt;box-shadow&lt;/code&gt; directement.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/VerbalExpressions/JSVerbalExpressions&quot;&gt;JSVerbalExpressions&lt;/a&gt; :
une lib JS qui permet d’écrire des regex en langage naturel, ou presque.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tldr-pages/tldr&quot;&gt;tldr&lt;/a&gt; :
une façon conçise et sympa de présenter les pages de manuel de commandes Linux,
Mac OS et d’autres. Pleins de clients sont disponibles, allant de Node.js au web
en passant par bash ou des applications Android et iOS.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://getcontenttools.com/&quot;&gt;ContentTools&lt;/a&gt; :
un éditeur WYSIWYG qui permet d’éditer facilement le contenu d’une page.
&lt;a href=&quot;http://getcontenttools.com/demo&quot;&gt;La démo&lt;/a&gt; est bien plus parlante que des mots,
vous devriez aller jetter un oeil !&lt;/p&gt;
&lt;p&gt;Voilà, c’est tout pour cette première !&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Gérer sa (ou ses) version(s) de NodeJS</title>
      <link>http://jesmodrazik.fr/articles/gerer-versions-nodejs/</link>
      <pubDate>Thu, 08 Oct 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://jesmodrazik.fr/articles/gerer-versions-nodejs/</guid>
      <author></author>
      <description>&lt;p&gt;La sortie de la version 4.0.0 de NodeJS apporte de nombreuses nouvelles
fonctionnalités, il est donc indispensable de faire la mise à jour. Sur Windows,
faire la mise à jour de NodeJS revient à désinstaller la version actuelle,
télécharger l’installeur de la nouvelle version. Sur Ubuntu, utiliser apt-get
est
&lt;a href=&quot;http://doc.ubuntu-fr.org/nodejs&quot;&gt;plus compliqué qu’il n’y parait&lt;/a&gt; pour gérer
son installation de NodeJS. Il fallait donc trouver une solution plus efficace.
Mon choix s’est porté sur
&lt;a href=&quot;https://github.com/creationix/nvm&quot;&gt;Node.js Version Manager (nvm)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Cet article est consacré à nvm qui ne fonctionne que sur Linux. Mais des
outils au fonctionnement similaires existent pour Windows :
&lt;a href=&quot;https://github.com/hakobera/nvmw&quot;&gt;nvmw&lt;/a&gt; et
&lt;a href=&quot;https://github.com/coreybutler/nvm-windows&quot;&gt;nvm-windows&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;qu-est-ce-que-c-est-&quot;&gt;Qu’est-ce que c’est ?&lt;/h2&gt;
&lt;p&gt;nvm est un programme permettant de gérer son installation de NodeJS. Il permet
d’installer, de mettre à jour, de désinstaller NodeJS sur votre machine, via une
simple CLI. L’avantage de cette solution par rapport à une installation via
apt-get, hormis la simplicité, c’est qu’il est possible d’installer plusieurs
versions de NodeJS sur une seule machine, et de switcher de l’une à l’autre
à la volée avec une simple commande.&lt;/p&gt;
&lt;h2 id=&quot;installer-nvm&quot;&gt;Installer nvm&lt;/h2&gt;
&lt;p&gt;Pour installer nvm, il y a deux solutions :
&lt;a href=&quot;https://github.com/creationix/nvm#install-script&quot;&gt;via un script&lt;/a&gt; ou
&lt;a href=&quot;https://github.com/creationix/nvm#manual-install&quot;&gt;manuellement&lt;/a&gt;. La
documentation est très claire sur ce point, rien à ajouter.&lt;/p&gt;
&lt;h2 id=&quot;installer-d-sinstaller-nodejs&quot;&gt;Installer/désinstaller NodeJS&lt;/h2&gt;
&lt;p&gt;La première étape après avoir installé nvm, c’est de l’utiliser pour installer
NodeJS :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nvm install &amp;lt;version&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;La version à installer peut être un numéro de version précis (par exemple
&lt;code&gt;0.12.7&lt;/code&gt;), ou un mot-clef. &lt;code&gt;stable&lt;/code&gt; installera la dernière version stable
publiée, &lt;code&gt;unstable&lt;/code&gt; la dernière version publiée, même si celle-ci n’est pas
taggée comme étant stable.&lt;/p&gt;
&lt;p&gt;Plusieurs versions peuvent être installée, en lançant plusieurs &lt;code&gt;nvm install&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Pour désinstaller une version précédemment installée, il suffit d’utiliser la
commande &lt;code&gt;nvm uninstall &amp;lt;version&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Enfin, la commande &lt;code&gt;nvm ls&lt;/code&gt; vous permet de voir quelles versions sont installées
sur votre machine. Pour obtenir la liste des versions disponibles, il faut
utiliser &lt;code&gt;nvm ls-remote&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;utiliser-une-version-install-e&quot;&gt;Utiliser une version installée&lt;/h2&gt;
&lt;p&gt;Une fois une ou plusieurs version(s) de NodeJS installée(s), la commande
&lt;code&gt;nvm use &amp;lt;version&amp;gt;&lt;/code&gt; permet d’utiliser l’une d’elles dans le shell courrant. En
effet, de base, lors de l’ouverture d’un shell, NodeJS n’est pas disponible
dans celui-ci. Il est toutefois possible de définir une version par défaut qui
sera utilisée automatiquement lors de l’ouverture d’un nouveau shell, avec la
commande suivante :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nvm alias default &amp;lt;version&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Il est aussi possible d’exécuter une seule commande en utilisant une version
donnée. Pour cela, il y a deux solutions. La première permet d’exécuter
directement un fichier ou une commande avec une version précise :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nvm run &amp;lt;version&amp;gt; &amp;lt;fichier&amp;gt;
nvm run 4.1.2 app.js
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;La seconde permet d’exécuter une commande avec la variable PATH pointant vers
la version de NodeJS spécifiée :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nvm exec &amp;lt;version&amp;gt; &amp;lt;commande&amp;gt;
nvm exec 4.1.2 node app.js
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;nvm nous permet donc de gérer très simplement l’installation, la mise à jour et
l’utilisation de NodeJS. Un avantage majeur de cette solution est de pouvoir
installer plusieurs versions et d’en utiliser une à un moment donné. J’ai exposé
ici les fonctionnalités les plus couramment utiles. Pour les cas d’utilisation
plus rares et poussés,
&lt;a href=&quot;https://github.com/creationix/nvm#node-version-manager-&quot;&gt;la documentation&lt;/a&gt; est
très complète.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Apprendre à se servir de ce qu'on a : la délégation d'événements</title>
      <link>http://jesmodrazik.fr/articles/apprendre-a-se-servir-de-ce-quon-a-event-delegation/</link>
      <pubDate>Sat, 04 Jul 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://jesmodrazik.fr/articles/apprendre-a-se-servir-de-ce-quon-a-event-delegation/</guid>
      <author></author>
      <description>&lt;p&gt;La délégation d’événements est un concept très fréquemment utilisé et extrêmement utile. Plutôt que d’attacher un événement à chaque élément enfant d’un autre élément, pourquoi ne pas en attacher un uniquement à l’élément parent, et se servir de la phase de bubbling pour identifier l’élément qui a déclenché l’événement ? jQuery et ses petits copains gèrent ça très bien (le fameux 2ème paramètre de &lt;code&gt;jQuery.on&lt;/code&gt;). Voyons comment faire la même chose en se passant de leurs services.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Cet article est le cinquième de la série &lt;a href=&quot;http://jesmodrazik.fr/articles/apprendre-a-se-servir-de-ce-quon-a&quot;&gt;“apprendre à se servir de ce qu’on a”&lt;/a&gt;, ayant pour objectif de montrer que l’utilisation d’une bibliothèque telle que jQuery n’a pas toujours de sens. N’hésitez pas à parcourir les autres articles !&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;pourquoi-faire-a-&quot;&gt;Pourquoi faire ça ?&lt;/h2&gt;
&lt;p&gt;Tout d’abord, cette technique améliore les performances. Au lieu d’attacher 100 événements à mes 100 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; qui composent mon &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;, je n’en attache qu’un seul sur le &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;. Mais un autre avantage non négligeable est qu’elle permet de ne pas se soucier de l’ajout ni de la suppression d’éléments au sein de l’élément auquel l’événement est attaché. En effet, en attachant un événément à chaque &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;, il faudrait, lorsque j’en supprime un, d’abord supprimer l’événement qui lui est attaché. De même si j’ajoute un &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;, il faudrait que je m’occupe de lui attacher un événement, puisque celui-ci ne peut pas deviner qu’il doit réagir comme les autres à l’événement &lt;code&gt;click&lt;/code&gt;, par exemple. Or en attachant un événement uniquement au &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;, celui-ci recevra l’événement click en provenance des &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;. Bien évidemment, ce n’est pas magique. Si la fonction de callback attachée au &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; se déclenche uniquement lorsqu’on intéragit avec un &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;, c’est parce qu’on lui a dit. Ceci est possible grâce à la phase de bubbling que traverse un événement, et qui est très bien expliquée chez &lt;a href=&quot;http://www.alsacreations.com/article/lire/578-La-gestion-des-evenements-en-JavaScript.html&quot;&gt;Alsacréations&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Voyons voir comment faire ceci avec nos petites main.&lt;/p&gt;
&lt;h2 id=&quot;la-d-l-gation-d-v-nement-sans-biblioth-que-aucune-&quot;&gt;La délégation d’événement sans bibliothèque aucune !&lt;/h2&gt;
&lt;p&gt;Alors, qu’est-ce qu’il nous faut ? D’abord un DOM, évidemment, et un event listener. On va changer d’exemple et créer une &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; contenant des &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;. Lorsqu’on cliquera sur un &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;, on affichera le texte qu’il contient.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;button&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Je suis le 1er bouton&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;button&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Je suis le 2eme bouton&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;button&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Je suis le 3eme bouton&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Il faut maintenant qu’on attache un événement &lt;code&gt;click&lt;/code&gt; à notre &lt;code&gt;div#container&lt;/code&gt;. Celui-ci devra regarder si l’élément ayant déclenché l’événement est un &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;, et si c’est le cas, afficher le texte contenu par celui-ci dans la console. Pour IE 8, on utilisera un polyfill de &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener?redirectlocale=en-US&amp;amp;redirectslug=DOM%2FEventTarget.addEventListener&quot;&gt;&lt;code&gt;EventTarget.addEventListener&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; container = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;'container'&lt;/span&gt;);

container.addEventListener(&lt;span class=&quot;string&quot;&gt;'click'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (event.target &amp;amp;&amp;amp; event.target.nodeName === &lt;span class=&quot;string&quot;&gt;'BUTTON'&lt;/span&gt;) {
        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(event.target.textContent);
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cette façon de faire fonctionne. Mais est très spécifique et va vite devenir trop complexe. On va donc décomposer son fonctionnement pour essayer de créer une fonction générique. Notre fonction précédente regarde si &lt;code&gt;event.target&lt;/code&gt; est bien un &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;. Pour généraliser, il faudrait qu’on puisse savoir si &lt;code&gt;event.target&lt;/code&gt; correspond à un sélecteur CSS donné. Puis, si l’élément correspond au sélecteur qui nous interresse, on exécute la fonction voulue.&lt;/p&gt;
&lt;p&gt;On a donc besoin d’une fonction permettant de savoir si un élément correspond à un sélecteur CSS ou non. Pour cela, il existe la méthode &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/matches&quot;&gt;&lt;code&gt;Element.matches&lt;/code&gt;&lt;/a&gt;. Celle-ci est disponible sur tous les navigateurs récents, ainsi que sur IE 9+ (avec préfixe, en ateste &lt;a href=&quot;http://caniuse.com/#feat=matchesselector&quot;&gt;caniuse&lt;/a&gt;). Pour IE8, le MDN fournit un polyfill utilisant &lt;code&gt;document.querySelectorAll&lt;/code&gt;. Celui-ci ne sera donc utilisable qu’avec des &lt;a href=&quot;http://www.w3.org/TR/CSS2/selector.html&quot;&gt;sélecteurs CSS 2.1&lt;/a&gt;, ce qui devrait être largement suffisant pour une grande majorité des cas.&lt;/p&gt;
&lt;p&gt;On a donc tout ce qu’il faut pour créer notre fonction &lt;code&gt;delegate&lt;/code&gt; !&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Notre fonction a besoin :&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// - de l'élément sur lequel écouter l'événement&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// - du type d'événement à écouter&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// - du sélecteur auquel les éléments doivent correspondre pour lancer le callback&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// - le callback à lancer&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;delegate&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;element, eventType, selector, callback&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;comment&quot;&gt;// on écoute l'événement sur l'élément parent&lt;/span&gt;
  element.addEventListener(eventType, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;comment&quot;&gt;// si event.target correspond au sélecteur voulu...&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (event.target &amp;amp;&amp;amp; event.target.matches(selector)) {
      &lt;span class=&quot;comment&quot;&gt;// ... on exécute le callback&lt;/span&gt;
      callback(event);
    }
  });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;C’est aussi simple que ça. Il n’y a plus qu’à mettre tout ça dans un petit module Node.js et de le &lt;code&gt;require&lt;/code&gt; pour ne pas polluer le scope global, et le tour est joué.&lt;/p&gt;
&lt;p&gt;Pour tester cette fonction, vous pouvez regarder le Codepen ci-dessous (n’oubliez pas d’ouvrir votre console pour voir les &lt;code&gt;console.log&lt;/code&gt;) :&lt;/p&gt;
&lt;p&gt;&lt;p data-height=&quot;268&quot; data-theme-id=&quot;15557&quot; data-slug-hash=&quot;GJQVYO&quot; data-default-tab=&quot;result&quot; data-user=&quot;JesmoDrazik&quot; class='codepen'&gt;See the Pen &lt;a href='http://codepen.io/JesmoDrazik/pen/GJQVYO/'&gt;Event delegation&lt;/a&gt; by Cyrille Perois (&lt;a href='http://codepen.io/JesmoDrazik'&gt;@JesmoDrazik&lt;/a&gt;) on &lt;a href='http://codepen.io'&gt;CodePen&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;
&lt;script async src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;une-biblioth-que-sp-cialis-e&quot;&gt;Une bibliothèque spécialisée&lt;/h2&gt;
&lt;p&gt;Il existe tout de même des bibliothèques spécialisées dans la délégation d’événements. Ma préférée est &lt;a href=&quot;https://github.com/ftlabs/ftdomdelegate/blob/master/lib/delegate.js&quot;&gt;FTDomDelegate&lt;/a&gt;. Celle-ci couvre absolument tous les cas que vous pouvez rencontrer, et est compatible jusqu’à IE 8, à condition d’utiliser un polyfill pour
&lt;code&gt;addEventListener&lt;/code&gt;, ce qui était de toutes façons nécessaire pour notre solution précédente. L’API de cette bibliothèque est simple et le tout fonctionne très bien. De plus, elle est disponible sur npm. Que du bonheur.&lt;/p&gt;
&lt;p&gt;Voilà, nous avons donc vu qu’une fonction de quelques lignes peut permettre de faire de la délégation d’événement efficace et simple. Si vous préférez utiliser une bibliothèque spécialisée, testée et éprouvée, alors je vous conseille d’aller voir du côté de FTDomDelegate.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Apprendre à se servir de ce qu'on a : faire des animations</title>
      <link>http://jesmodrazik.fr/articles/apprendre-a-se-servir-de-ce-quon-a-animations/</link>
      <pubDate>Sat, 30 May 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://jesmodrazik.fr/articles/apprendre-a-se-servir-de-ce-quon-a-animations/</guid>
      <author></author>
      <description>&lt;p&gt;Les sites web sont aujourd’hui remplis d’animations en tout genre. Elles permettent d’enrichir l’expérience utilisateur, de rendre une interface plus vivante, plus naturelle ou de faire un effet “waouh” qui fera que le site restera dans l’esprit de l’utilisateur. Bref, faire des animations, c’est aujourd’hui monnaie courante. Et ce cher jQuery et sa bande de copains nous permettent de faire ça très facilement. Mais à nouveau : et si on essayait de s’en passer ?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Cet article est le quatrième de la série &lt;a href=&quot;http://jesmodrazik.fr/articles/apprendre-a-se-servir-de-ce-quon-a&quot;&gt;“apprendre à se servir de ce qu’on a”&lt;/a&gt;, ayant pour objectif de montrer que l’utilisation d’une bibliothèque telle que jQuery n’a pas toujours de sens. N’hésitez pas à parcourir les autres articles !&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;oubliez-javascript-faites-des-animations-css&quot;&gt;Oubliez JavaScript, faites des animations CSS&lt;/h2&gt;
&lt;p&gt;La toute première chose que je souhaitais évoquer dans cet article, c’est de privilégier les animations réalisées en CSS. La raison est simple : les animations CSS peuvent bénéficier d’optimisations faites par les navigateurs (souvent apparentées à de l’accélération matérielle sans en être réellement), pas celles réalisées en JavaScript. Vous pouvez trouver un article sur ce sujet chez &lt;a href=&quot;http://www.alsacreations.com/astuce/lire/1565-acceleration-materielle-au-service-de-vos-animations-css.html&quot;&gt;Alsacréations&lt;/a&gt;. Les animations CSS sont moins compatibles (voir les tables caniuse de &lt;a href=&quot;http://caniuse.com/#feat=css-transitions&quot;&gt;&lt;code&gt;transition&lt;/code&gt;&lt;/a&gt; et &lt;a href=&quot;http://caniuse.com/#feat=css-animation&quot;&gt;&lt;code&gt;animation&lt;/code&gt;&lt;/a&gt;) que leurs cousines en JavaScript, mais sont la plupart du temps plus efficaces et agréables (du fait des fameuses optimisations). De plus, animer un élément au déclenchement d’un événement devient aussi simple que &lt;a href=&quot;http://jesmodrazik.fr/articles/apprendre-a-se-servir-de-ce-quon-a-manipuler-styles-elements/&quot;&gt;lui attribuer ou lui retirer une classe&lt;/a&gt;, comme vous pouvez le voir ci-dessous :&lt;/p&gt;
&lt;p&gt;&lt;p data-height=&quot;268&quot; data-theme-id=&quot;15557&quot; data-slug-hash=&quot;wagdmZ&quot; data-default-tab=&quot;result&quot; data-user=&quot;JesmoDrazik&quot; class='codepen'&gt;See the Pen &lt;a href='http://codepen.io/JesmoDrazik/pen/wagdmZ/'&gt;CSS animations&lt;/a&gt; by Cyrille Perois (&lt;a href='http://codepen.io/JesmoDrazik'&gt;@JesmoDrazik&lt;/a&gt;) on &lt;a href='http://codepen.io'&gt;CodePen&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;
&lt;script async src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Arrivés ici, ceux qui veulent faire de superbes animations sur des navigateurs qui ne supportent pas &lt;code&gt;transition&lt;/code&gt; et / ou &lt;code&gt;animation&lt;/code&gt; se posent toujours LA question : comment faire des animations en JavaScript ? Désolé de vous décevoir, mais cette fois-ci on ne va pas faire uniquemenent avec “ce qu’on a”. En effet, à moins que toutes vos animations soient extrêmement simplistes (passer une opacité de 0 à 1, animer une couleur, une taille, une position) et linéaires, faire des animations est &lt;a href=&quot;http://javascript.info/tutorial/animation&quot;&gt;une vraie galère&lt;/a&gt;. On va donc plutôt se pencher sur une alternative aux jQuery-like, spécialisée dans les animations. Ce que je veux, c’est une bibliothèque légère, performante, compatible avec de vieux navigateurs (comme d’habitude, je vise au minimum IE8), pérenne et simple d’utilisation. Il y a au moins une bibliothèque qui remplit tous ces critères.&lt;/p&gt;
&lt;h2 id=&quot;greensock-animation-platform-gsap-&quot;&gt;GreenSock Animation Platform (GSAP)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://greensock.com/gsap&quot;&gt;GSAP&lt;/a&gt; est une bibliothèque permettant de faire des animations, le café et la vaiselle. C’est très simple : peu importe l’animation que vous souhaitez faire, elle est réalisable. En tant que tel, GSAP est assez lourd (toute proportion gardée, la version la plus lourde de GSAP pèse 105Ko, contre 93Ko pour jQuery). Mais l’un de ses nombreux avantages est d’adopter une architecture basée sur des plugins. Il est donc possible d’adapter le poids de la bibliothèque en ne chargeant que ce dont on a besoin. Pour résumer, voici comment se compose GSAP :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TweenLite : la librairie de base. Toutes les fonctions couvrant la majorité des cas d’utilisation sont présentes. &lt;code&gt;TweenLite.to&lt;/code&gt; permet d’animer un élément de son état actuel à un autre spécifié en paramètre; &lt;code&gt;TweenLite.from&lt;/code&gt; permet d’animer un élément d’un état spécifié en paramètre à son état actuel. De très nombreuses “timing functions” sont disponibles.&lt;/li&gt;
&lt;li&gt;TweenMax : extension de TweenLite embarquant des fonctions supplémentaires ainsi que des plugins comme CSSPlugin, d’autres timing functions ainsi que TimelineLite et TimelineMax.&lt;/li&gt;
&lt;li&gt;TimelineLite : permet de définir des séquences d’animations et de les jouer dans tous les sens, les arrêter, les reprendre, les recommencer…&lt;/li&gt;
&lt;li&gt;TimelineMax : exactement comme TweenMax pour TweenLite, mais pour TimelineLite.&lt;/li&gt;
&lt;li&gt;Des plugins : qu’on peut trouver &lt;a href=&quot;https://greensock.com/plugins/&quot;&gt;ici&lt;/a&gt;, qui font des tas de choses… Je vous laisse regarder.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On commencera donc généralement par importer TweenLite, puis les plugins dont on a besoin, et on remplacera le tout par TweenMax si on en arrive à avoir besoin de tout.&lt;/p&gt;
&lt;p&gt;L’API de GSAP est très simple. Il n’y a pas besoin de se souvenir de beaucoup de fonctions pour faire des animations assez complexes. Les performances sont au rendez-vous, comme en témoigne &lt;a href=&quot;http://greensock.com/js/speed.html&quot;&gt;ce comparatif&lt;/a&gt;. Je ne vais pas faire de démo, puisque vous en trouverez une très complète et très bien faite &lt;a href=&quot;http://greensock.com/jump-start-js&quot;&gt;sur leur site&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;GSAP est pour moi la référence des bibliothèques d’animation en JavaScript. “Petit” bonus : c’est compatible jusqu’à IE6. Autre “petit” bonus : c’est disponible sur &lt;a href=&quot;https://www.npmjs.com/package/gsap&quot;&gt;npm&lt;/a&gt;, vous pourrez donc l’importer et le mettre à jour très facilement.&lt;/p&gt;
&lt;p&gt;Il est donc très simple et avantagieux d’utiliser GSAP pour faire ses animations JavaScript. Pour les projets pour lesquels vous êtes “obligés” d’utiliser jQuery, &lt;a href=&quot;http://greensock.com/jquery-gsap-plugin&quot;&gt;un plugin&lt;/a&gt; surchargeant la méthode &lt;code&gt;animate&lt;/code&gt; est même disponible. Toutefois, GSAP est une solution à envisager uniquement si les animations CSS ne peuvent pas être utilisées seules dans votre projet. Les plus téméraires pourront tenter d’écrire leur propre fonction d’animation… Bon courage !&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Apprendre à se servir de ce qu'on a : manipuler les styles des éléments</title>
      <link>http://jesmodrazik.fr/articles/apprendre-a-se-servir-de-ce-quon-a-manipuler-styles-elements/</link>
      <pubDate>Thu, 14 May 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://jesmodrazik.fr/articles/apprendre-a-se-servir-de-ce-quon-a-manipuler-styles-elements/</guid>
      <author></author>
      <description>&lt;p&gt;Ajouter, modifier, supprimer des styles inline, des classes… Autant de choses facilitées par les jQuery-like, mais tout aussi simple à faire sans.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Cet article est le troisième de la série &lt;a href=&quot;http://jesmodrazik.fr/articles/apprendre-a-se-servir-de-ce-quon-a&quot;&gt;“apprendre à se servir de ce qu’on a”&lt;/a&gt;, ayant pour objectif de montrer que l’utilisation d’une bibliothèque telle que jQuery n’a pas toujours de sens. N’hésitez pas à parcourir les autres articles !&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;manipuler-les-styles-inline&quot;&gt;Manipuler les styles inline&lt;/h2&gt;
&lt;p&gt;Avec jQuery, on ferait ça de la manière suivante :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; $element = $(&lt;span class=&quot;string&quot;&gt;'#element'&lt;/span&gt;);
$element.css(&lt;span class=&quot;string&quot;&gt;'background-color'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'#000'&lt;/span&gt;);
$element.css({
    &lt;span class=&quot;attr&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'#fff'&lt;/span&gt;,
    &lt;span class=&quot;attr&quot;&gt;display&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'block'&lt;/span&gt;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mais c’est tout aussi simple avec &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style&quot;&gt;&lt;code&gt;HTMLElement.style&lt;/code&gt;&lt;/a&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; element = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;'element'&lt;/span&gt;);
element.style.backgroundColor = &lt;span class=&quot;string&quot;&gt;'#000'&lt;/span&gt;;
element.style.color = &lt;span class=&quot;string&quot;&gt;'#fff'&lt;/span&gt;;
element.style.display = &lt;span class=&quot;string&quot;&gt;'block'&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Toutefois on n’a pas la possibilité de passer directement un objet à &lt;code&gt;HTMLElement.style&lt;/code&gt;, comme on le fait avec la méthode &lt;code&gt;css&lt;/code&gt; de jQuery, puisque &lt;code&gt;HTMLElement.style&lt;/code&gt; n’est pas un simple objet mais un &lt;code&gt;CSSStyleDeclaration&lt;/code&gt;. La liste des propriétés CSS accessibles accessible via &lt;code&gt;style&lt;/code&gt; est disponible &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Properties_Reference&quot;&gt;sur le MDN&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Pour modifier plusieurs propriétés d’un seul coup, il est quand même possible d’utiliser &lt;code&gt;CSSStyleDeclaration.cssText&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;element.style.cssText = &lt;span class=&quot;string&quot;&gt;'background-color: #000; color: #fff; display: block;'&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ca marche ©, mais c’est quand même beaucoup moins cool à lire qu’un objet.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration&quot;&gt;Documentation de &lt;code&gt;CSSStyleDeclaration&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;manipuler-les-classes&quot;&gt;Manipuler les classes&lt;/h2&gt;
&lt;p&gt;Le plus simple pour gérer les classes d’un element, c’est &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/className?redirectlocale=en-US&amp;amp;redirectslug=DOM%2Felement.className&quot;&gt;&lt;code&gt;Element.className&lt;/code&gt;&lt;/a&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; element = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;'element'&lt;/span&gt;);
element.className = &lt;span class=&quot;string&quot;&gt;'toto'&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Avec ce bout de code, l’élément ayant l’id &lt;code&gt;element&lt;/code&gt; se verra attribuer la classe “toto”. Toutefois, si l’élément a plusieurs classes, l’affectation de son &lt;code&gt;className&lt;/code&gt; écrasera tout. On a donc besoin d’un moyen de gérer la liste des classes de l’élément, et non pas la chaîne de caractères la représentant. Ce qui nous mène à l’API &lt;a href=&quot;tps://developer.mozilla.org/en-US/docs/Web/API/Element/classList?redirectlocale=en-US&amp;amp;redirectslug=DOM%2Felement.classList&quot;&gt;&lt;code&gt;Element.classList&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Cette API est très simple puisqu’elle n’expose que 4 méthodes : &lt;code&gt;add()&lt;/code&gt;, &lt;code&gt;remove()&lt;/code&gt;, &lt;code&gt;toggle&lt;/code&gt; et &lt;code&gt;contains&lt;/code&gt;, donc les noms sont plutôt évocateurs :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&amp;lt;div id=&quot;element&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
element.classList.add(&lt;span class=&quot;string&quot;&gt;'toto'&lt;/span&gt;);
&lt;span class=&quot;comment&quot;&gt;//&amp;lt;div class=&quot;toto&quot; id=&quot;element&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
element.classList.remove(&lt;span class=&quot;string&quot;&gt;'toto'&lt;/span&gt;);
&lt;span class=&quot;comment&quot;&gt;//&amp;lt;div class=&quot;&quot; id=&quot;element&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
element.classList.toggle(&lt;span class=&quot;string&quot;&gt;'toto'&lt;/span&gt;);
&lt;span class=&quot;comment&quot;&gt;//&amp;lt;div class=&quot;toto&quot; id=&quot;element&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
element.classList.toggle(&lt;span class=&quot;string&quot;&gt;'toto'&lt;/span&gt;);
&lt;span class=&quot;comment&quot;&gt;//&amp;lt;div class=&quot;&quot; id=&quot;element&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(element.classList.contains(&lt;span class=&quot;string&quot;&gt;'toto'&lt;/span&gt;));
&lt;span class=&quot;comment&quot;&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;L’API &lt;code&gt;classList&lt;/code&gt; n’est utilisable qu’à partir d’IE 10. Pour les versions antérieures, il faut donc faire appel à un polyfill tel que celui fournit sur &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/classList?redirectlocale=en-US&amp;amp;redirectslug=DOM%2Felement.classList#wrapper&quot;&gt;le MDN&lt;/a&gt; qui est compatible jusqu’à IE 8.&lt;/p&gt;
&lt;p&gt;Nous avons donc vu qu’il était possible de gérer les styles d’un élément du DOM via ses styles inline, mais aussi sa liste de classes, et ce sans utiliser de bibliothèque tierces (uniquement un minuscule polyfill dans le cas où de vieilles versions d’IE devraient être supportées).&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Supprimer un fichier (ou un dossier) dont le chemin est trop long</title>
      <link>http://jesmodrazik.fr/articles/supprimer-fichier-chemin-trop-long/</link>
      <pubDate>Fri, 08 May 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://jesmodrazik.fr/articles/supprimer-fichier-chemin-trop-long/</guid>
      <author></author>
      <description>&lt;p&gt;Quand on travaille avec npm sous windows, on est souvent confronté au message d’erreur suivant lorsqu’on veut supprimer un module non utilisé ou le dossier &lt;code&gt;node_modules&lt;/code&gt; pour quelque raison que ce soit : “Les noms de fichiers source sont plus longs que ne le permet le système de fichiers. Choisissez un emplacement de destination avec un nom plus court, ou donnez des noms plus courts aux fichiers avant de les déplacer”. Il existe un petit outil qui permet de passer outre cette restriction.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Edit 22/01/2016 : il existe en fait une solution un peu plus simple, dont je
dois la découverte à un collègue (qu’il doit lui-même au web). Il s’agit
d’utiliser la commande &lt;code&gt;robocopy&lt;/code&gt;, disponible depuis Windows XP, pour
“remplacer” le dossier &lt;code&gt;node_modules&lt;/code&gt; par un dossier vide :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;robocopy &amp;lt;chemin vers un dossier vide&amp;gt; &amp;lt;chemin vers node_modules&amp;gt; /MIR
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;http://www.michael-whelan.net/deleting-nested-node-modules-folders/&quot;&gt;Source&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Si cette solution ne fonctionne pas pour vous pour n’importe quelle raison, il
reste la suivante.&lt;/p&gt;
&lt;p&gt;C’est OSMStudios qui fournit &lt;a href=&quot;http://osmstudios.net/projects/path-too-long&quot;&gt;PathTooLong&lt;/a&gt;, écrit en Java, et qui permet tout simplement de sélectionner un dossier dont le chemin est trop long pour être supprimé par windows, et le supprimer pour de bon.&lt;/p&gt;
&lt;p&gt;Il suffit de télécharger le fichier JAR et de l’exécuter avec un JDK 1.7 ou plus :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;java -jar PathTooLong.jar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;/articles/supprimer-fichier-chemin-trop-long/images/01.jpg&quot; alt=&quot;Fenêtre principale de PathTooLong&quot;&gt;&lt;/p&gt;
&lt;p&gt;Une fenêtre s’ouvre, il ne vous reste plus qu’à sélectionner le dossier à supprimer, à confirmer la suppression et attendre plus ou moins longtemps en fonction de la taille de celui-ci. Un message de succès s’affiche une fois le dossier supprimé.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/supprimer-fichier-chemin-trop-long/images/02.jpg&quot; alt=&quot;Confirmation de suppression&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/supprimer-fichier-chemin-trop-long/images/03.jpg&quot; alt=&quot;Message de succès&quot;&gt;&lt;/p&gt;
&lt;p&gt;Attention, comme l’indique le message vous demandant de confirmer la suppression, celle-ci est définitive. Les fichiers ne passeront pas par la corbeille.&lt;/p&gt;
&lt;p&gt;Pour les sceptiques, le code source est disponible sur &lt;a href=&quot;https://github.com/DawsonG/PathTooLong&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Apprendre à se servir de ce qu'on a : manipuler le DOM</title>
      <link>http://jesmodrazik.fr/articles/apprendre-a-se-servir-de-ce-quon-a-manipuler-dom/</link>
      <pubDate>Mon, 04 May 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://jesmodrazik.fr/articles/apprendre-a-se-servir-de-ce-quon-a-manipuler-dom/</guid>
      <author></author>
      <description>&lt;p&gt;L’une des fonctionnalités majeures des jQuery-like est la manipulation du DOM. Voyons comment faire pour manipuler le DOM sans utiliser de bibliothèque.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Cet article est le deuxième de la série &lt;a href=&quot;http://jesmodrazik.fr/articles/apprendre-a-se-servir-de-ce-quon-a&quot;&gt;“apprendre à se servir de ce qu’on a”&lt;/a&gt;, ayant pour objectif de montrer que l’utilisation d’une bibliothèque telle que jQuery n’a pas toujours de sens. N’hésitez pas à parcourir les autres articles !&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;qu-est-ce-que-c-est-quoi-dis-donc-que-le-dom-&quot;&gt;Qu’est-ce que c’est quoi dis-donc que le DOM ?&lt;/h2&gt;
&lt;p&gt;Je ne vais pas réinventer la roue. La définition du DOM fournie par le Mozilla Developer Network (MDN), auquel je vais souvent faire référence dans cette liste d’articles, est parfaite :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Le &lt;strong&gt;Document Object Model&lt;/strong&gt; ou &lt;strong&gt;DOM&lt;/strong&gt; (pour modèle objet de document) est une interface de programmation pour les documents HTML et XML. Il fournit une représentation structurée du document sous forme d’un arbre et définit la façon dont la structure peut être manipulée par les programmes, en termes de style et de contenu. Le DOM représente le document comme un ensemble de nœuds et d’objets possédant des propriétés et des méthodes. Cela permet de manipuler des pages web grâce à des scripts et/ou des langages de programmation.
(&lt;a href=&quot;https://developer.mozilla.org/fr/docs/Web/API/R%C3%A9f%C3%A9rence_du_DOM_Gecko&quot;&gt;Référence du DOM sur le MDN&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;s-lectionner-des-l-ments&quot;&gt;Sélectionner des éléments&lt;/h2&gt;
&lt;p&gt;Pour travailler avec le DOM, la base c’est de pouvoir sélectionner des éléments, en vue de les modifier, de les supprimer, les cloner, les déplacer, etc. Avec un jQuery-like, ça se fait très simplement avec une fonction, souvent nommée &lt;code&gt;$&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; $element = $(&lt;span class=&quot;string&quot;&gt;'#element'&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; $buttons = $(&lt;span class=&quot;string&quot;&gt;'button'&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pourtant, les navigateurs proposent une API pour faire la même chose : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector?redirectlocale=en-US&amp;amp;redirectslug=DOM%2FDocument.querySelector&quot;&gt;&lt;code&gt;document.querySelector()&lt;/code&gt;&lt;/a&gt; et &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll?redirectlocale=en-US&amp;amp;redirectslug=DOM%2FDocument.querySelectorAll&quot;&gt;&lt;code&gt;document.querySelectorAll()&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;querySelector&lt;/code&gt; renvoie le premier élément trouvé ou &lt;code&gt;null&lt;/code&gt;. &lt;code&gt;querySelectorAll&lt;/code&gt; renvoie une &lt;code&gt;NodeList&lt;/code&gt; contenant tous les éléments trouvés (donc vide si aucun élément n’est trouvé). Voici donc comment faire la même chose que le code précédent, avec cette API :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; element = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;'#element'&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; buttons = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span class=&quot;string&quot;&gt;'button'&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Il y a deux subtilités. La première, c’est cette &lt;code&gt;NodeList&lt;/code&gt; renvoyée par &lt;code&gt;querySelectorAll&lt;/code&gt;. On s’attendrait plutôt à obtenir un &lt;code&gt;Array&lt;/code&gt;. En effet, &lt;code&gt;NodeList&lt;/code&gt; n’expose pas toutes les méthodes pratiques qu’&lt;code&gt;Array&lt;/code&gt; expose, et dont vous trouverez une liste &lt;a href=&quot;http://es5.github.io/#x15.4.4&quot;&gt;par ici&lt;/a&gt; (on s’arrête à EcmaScript 5 car nous ciblons IE8, mais si vous voulez utiliser des méthodes introduites avec EcmaScript 2015 - le nom officiel d’EcmaScript 6 -, vous pouvez chercher des polyfills). Pour des raisons de praticité, il vaut donc mieux transformer cette &lt;code&gt;NodeList&lt;/code&gt; en &lt;code&gt;Array&lt;/code&gt;. On va donc se recréer une fonction &lt;code&gt;$&lt;/code&gt; qui fait ça.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;selector&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; elements = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelectorAll(selector);

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.apply(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, elements);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La seconde, c’est que IE8 ne connait pas les sélecteurs CSS 3. Il n’est donc pas possible de les utiliser avec &lt;code&gt;querySelector&lt;/code&gt; et &lt;code&gt;querySelectorAll&lt;/code&gt;, ce qui peut être handicapant dans certains cas, mais il est souvent possible de se débrouiller sans. &lt;a href=&quot;http://www.w3.org/TR/CSS2/selector.html&quot;&gt;Voici la liste des sélecteurs supportés par IE8&lt;/a&gt; (ce sont les sélecteurs CSS 2.1, quoi).&lt;/p&gt;
&lt;h2 id=&quot;cr-er-des-l-ments&quot;&gt;Créer des éléments&lt;/h2&gt;
&lt;p&gt;Pour créer des éléments, c’est très simple. Là où on ferait un &lt;code&gt;$(&amp;#39;&amp;lt;div /&amp;gt;&amp;#39;)&lt;/code&gt; avec jQuery ou un &lt;code&gt;new Element(&amp;#39;div&amp;#39;)&lt;/code&gt; avec MooTools, en JavaScript natif, il suffit de faire ceci :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; div = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;string&quot;&gt;'div'&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Il existe aussi une méthode de &lt;code&gt;document&lt;/code&gt; permettant de créer un noeud texte, que l’on pourra par la suite ajouter à notre div précédemment créée :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; text = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createTextNode(&lt;span class=&quot;string&quot;&gt;'Le futur contenu de ma div !'&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement&quot;&gt;Documentation de &lt;code&gt;document.createElement()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/createTextNode&quot;&gt;Documentation de &lt;code&gt;documentation.createTextNode()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;ins-rer-des-bouts-de-dom&quot;&gt;Insérer des bouts de DOM&lt;/h2&gt;
&lt;p&gt;Reprenons nos deux noeuds précédents. Imaginons qu’on veuille donc insérer le texte dans la div, puis la div dans le &lt;code&gt;body&lt;/code&gt;. Pour ça, il suffit de faire ceci :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;div.appendChild(text);
&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.appendChild(div);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;C’est exactement la même chose qu’avec un jQuery-like, sauf que c’est natif.&lt;/p&gt;
&lt;p&gt;Ca fonctionne très bien pour ajouter un ou deux éléments, mais pour ajouter de gros bouts de DOM, il est conseillé d’utiliser &lt;code&gt;document.createDocumentFragment()&lt;/code&gt;. En effet, l’API DOM des navigateurs est extrêmement lente. Par conséquent, faire plusieurs petites insertions est moins performant qu’une seule grosse insertion. En utilisant &lt;code&gt;document.createDocumentFragment()&lt;/code&gt;, on crée un &lt;code&gt;DocumentFragment&lt;/code&gt; (merci Captain Obvious) dans lequel on va faire toutes nos petites insertions, puis on va finir par insérer tout le résultat, en une seule fois, dans le DOM. Imaginons qu’on veuille créer une liste non ordonnée d’éléments se trouvant dans un tableau (pourquoi pas) :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; elements = [&lt;span class=&quot;string&quot;&gt;'Pommes'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'Poires'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'Carottes'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'Tomates'&lt;/span&gt;];
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fragment = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createDocumentFragment();
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; title = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;string&quot;&gt;'h1'&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; list = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;string&quot;&gt;'ul'&lt;/span&gt;);
title.innerHTML = &lt;span class=&quot;string&quot;&gt;'Ma liste de trucs à acheter'&lt;/span&gt;;
fragment.appendChild(title);

elements.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;element&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; listItem = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;string&quot;&gt;'li'&lt;/span&gt;);
    listItem.innerHTML = element;

    list.appendChild(listItem);
});

fragment.appendChild(list);

&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.appendChild(fragment);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Et voilà, on construit petit à petit notre DOM. Une fois terminé, on l’insère en une seule traite. L’exemple précédent est très simple, et pourtant le gain en performance est déjà notable, comme en atteste &lt;a href=&quot;http://jsperf.com/documentfragment-speed-test&quot;&gt;ce jsPerf&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Il est aussi possible de prepend un élément, c’est à dire non pas l’ajouter à la fin des fils d’un noeud, mais avant l’un d’entre eux. Imaginons qu’on veuille ajouter un élément au tout début de notre liste précédente, on aurait donc besoin de 3 choses : la liste, l’élément avant lequel on souhaite ajouter un nouvel élément, et le nouvel élément. Ce qui donne ceci :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; list = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;'ul'&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; firstItem = list.querySelector(&lt;span class=&quot;string&quot;&gt;'li'&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; newItem = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;string&quot;&gt;'li'&lt;/span&gt;);
newItem.innerHTML = &lt;span class=&quot;string&quot;&gt;'Courgettes'&lt;/span&gt;;

list.insertBefore(newItem, firstItem);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si &lt;code&gt;firstItem&lt;/code&gt; vaut &lt;code&gt;null&lt;/code&gt;, le comportement est équivalent à &lt;code&gt;appendChild&lt;/code&gt;, ce qui permet d’insérer un élément avant un autre élément, ou à la fin du parent dans le cas où l’autre élément n’existe pas.&lt;/p&gt;
&lt;p&gt;Le meilleur pour la fin : &lt;code&gt;Element.insertAdjacentHTML()&lt;/code&gt;. Cette méthode permet d’insérer un élément soit avant, au tout début, en toute fin ou après l’élément auquel elle est appliquée. Exemple :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;parent&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;child&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Child element&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; parent = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;'#parent'&lt;/span&gt;);

parent.insertAdjacentHTML(&lt;span class=&quot;string&quot;&gt;'beforebegin'&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;'&amp;lt;div&amp;gt;Beforebegin&amp;lt;/div&amp;gt;'&lt;/span&gt;);
parent.insertAdjacentHTML(&lt;span class=&quot;string&quot;&gt;'afterbegin'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'&amp;lt;div&amp;gt;Afterbegin&amp;lt;/div&amp;gt;'&lt;/span&gt;);
parent.insertAdjacentHTML(&lt;span class=&quot;string&quot;&gt;'beforeend'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'&amp;lt;div&amp;gt;Beforeend&amp;lt;/div&amp;gt;'&lt;/span&gt;);
parent.insertAdjacentHTML(&lt;span class=&quot;string&quot;&gt;'afterend'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'&amp;lt;div&amp;gt;Afterend&amp;lt;/div&amp;gt;'&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On obtient le DOM suivant :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;Beforebegin&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;parent&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;Afterbegin&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;child&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Child element&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;Beforeend&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;Afterend&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Avec tout ça, il est possible d’ajouter des éléments à peu près n’importe où dans notre DOM, sans avoir recours à une bibliothèque.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild&quot;&gt;Documentation de &lt;code&gt;Node.appendChild()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/createDocumentFragment&quot;&gt;Documentation de &lt;code&gt;Document.createDocumentFragment()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore&quot;&gt;Documentation de &lt;code&gt;Node.insertBefore()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML&quot;&gt;Documentation de &lt;code&gt;Element.insertAdjacentHTML()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;cloner-un-lement&quot;&gt;Cloner un élement&lt;/h2&gt;
&lt;p&gt;Enfin, il est possible de cloner un élément existant dans le DOM. Pour cela il suffit d’utiliser la méthode &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Node/cloneNode&quot;&gt;&lt;code&gt;Node.cloneNode()&lt;/code&gt;&lt;/a&gt;, comme ceci :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; title = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;'h1'&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; clonedTitle = title.cloneNode(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Le paramètre qu’on passe à &lt;code&gt;cloneNode&lt;/code&gt; sert à dire si on veut que les fils du &lt;code&gt;Node&lt;/code&gt; soient aussi clonés ou non. Ici, je veux que le texte que contient mon &lt;code&gt;h1&lt;/code&gt; soit aussi cloné, donc je passe &lt;code&gt;true&lt;/code&gt;. Le noeud cloné n’est pas directement inséré dans le DOM. On a sa référence dans &lt;code&gt;clonedTitle&lt;/code&gt;, ce qui nous permet de l’insérer où on veut en utilisant les méthodes vues précédemment.&lt;/p&gt;
&lt;h2 id=&quot;supprimer-un-l-ment&quot;&gt;Supprimer un élément&lt;/h2&gt;
&lt;p&gt;On sait sélectionner des éléments, en ajouter, en cloner. Il ne reste plus qu’à savoir comment en supprimer. Et pour ça, il faut utiliser la méthode &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild&quot;&gt;&lt;code&gt;Node.removeChild()&lt;/code&gt;&lt;/a&gt;. Supprimons le premier élément de notre liste :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; list = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;'ul'&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; firstItem = list.querySelector(&lt;span class=&quot;string&quot;&gt;'li'&lt;/span&gt;);

list.removeChild(firstItem);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Voilà. La majorité des besoins les plus courants en termes de manipulation du DOM sont couverts par les API de base des navigateurs. Il y a beaucoup d’autres méthodes à notre disposition. La documentation du MDN est très complète, n’hésitez pas à la parcourir.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Apprendre à se servir de ce qu'on a</title>
      <link>http://jesmodrazik.fr/articles/apprendre-a-se-servir-de-ce-quon-a/</link>
      <pubDate>Sun, 03 May 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://jesmodrazik.fr/articles/apprendre-a-se-servir-de-ce-quon-a/</guid>
      <author></author>
      <description>&lt;p&gt;Très souvent, lorsqu’on développe un site ou une application web, l’utilisation d’une bibliothèque telle que jQuery ou MooTools (certes, celle-ci a, parait-il, perdu la guerre, mais je trouve que cette bibliothèque propose tout de même des choses intéressantes) s’impose. S’impose ? Et si ce n’était finalement pas si obligatoire que ça ? Si on pouvait faire la même chose qu’avec jQuery, mais sans jQuery ?&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Que l’on soit bien d’accord. Je ne crache pas sur jQuery ni sur ses petits copains. Cette bibliothèque rend un grand service, et est de très bonne qualité. Seulement, jQuery n’a pas forcément d’intérêt pour tous vos projets web. Et c’est précisément le problème. Un jQuery-like est souvent un choix par défaut au début d’un projet. Pourtant, les API JavaScript exposées par les navigateurs suffisent à couvrir une grande variété de besoins. Cette série d’articles aura pour but de donner des solutions aux problèmes couramment rencontrés lors du développement de sites (et d’applications) web. J’évoquerais les sujets suivants :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1ère partie : introduction&lt;/li&gt;
&lt;li&gt;2ème partie : &lt;a href=&quot;http://jesmodrazik.fr/articles/apprendre-a-se-servir-de-ce-quon-a-manipuler-dom/&quot;&gt;manipuler le DOM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3ème partie : &lt;a href=&quot;http://jesmodrazik.fr/articles/apprendre-a-se-servir-de-ce-quon-a-manipuler-styles-elements/&quot;&gt;manipuler le style des éléments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4ème partie : &lt;a href=&quot;http://jesmodrazik.fr/articles/apprendre-a-se-servir-de-ce-quon-a-animations&quot;&gt;faire des animations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;5ème partie : &lt;a href=&quot;http://jesmodrazik.fr/articles/apprendre-a-se-servir-de-ce-quon-a-event-delegation&quot;&gt;la délégation d’événements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;6ème partie : &lt;a href=&quot;http://jesmodrazik.fr/articles/apprendre-a-se-servir-de-ce-quon-a-ajax/&quot;&gt;AJAX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Les liens ci-dessus seront mis à jour au fur et à mesure de la publication de chaque partie.&lt;/p&gt;
&lt;p&gt;Je m’efforcerais de donner des solutions compatibles avec Internet Explorer 8 et plus, ainsi que les navigateurs dits “récents” (Firefox, Chrome, Safari, Opera…). Les très vieilles versions d’Internet Explorer ne sont quasiment plus utilisées et, selon moi, freinent grandement nos développements qui doivent être compatibles avec elles. Je m’épargnerais cela pour ces articles.&lt;/p&gt;
&lt;p&gt;Parfois, les solutions passeront par la mise en place de polyfills. C’est pourquoi je tiens à présenter ce concept dans cette introduction, pour ceux qui ne sauraient pas ce que c’est. Un polyfill est un script JavaScript qui a pour but de simuler une fonctionnalité dans un navigateur qui ne la propose pas de manière native. Par exemple, IE8 ne propose pas l’objet &lt;code&gt;console&lt;/code&gt;. On peut donc exécuter un script qui lui ajoutera cet objet (pour ceux que ça intéresse, il y en a un qui est disponible &lt;a href=&quot;https://github.com/paulmillr/console-polyfill&quot;&gt;sur github&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Pour trouver un polyfill, c’est très simple. Il suffit de taper dans son moteur de recherche favoris “polyfill [fonctionnalité recherchée]” (exemple: “polyfill console”). Sachez que le &lt;a href=&quot;https://developer.mozilla.org/fr/&quot;&gt;Mozilla Developer Network (MDN)&lt;/a&gt; propose très souvent des polyfills sur ses pages de documentation de fonctions / méthodes.&lt;/p&gt;
&lt;p&gt;Un dernier point sur les polyfills. Il existe un service permettant de les récupérer à la demande. Je ne l’ai encore jamais utilisé, mais vous pouvez aller voir ça &lt;a href=&quot;https://github.com/Financial-Times/polyfill-service&quot;&gt;par ici&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Voilà pour l’introduction de cette série d’articles.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Bye bye Tumblr !</title>
      <link>http://jesmodrazik.fr/articles/bye-bye-tumblr/</link>
      <pubDate>Sun, 15 Mar 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://jesmodrazik.fr/articles/bye-bye-tumblr/</guid>
      <author></author>
      <description>&lt;p&gt;En ce moment, je m’interesse pas mal à tout ce qui touche à la perte de contrôle sur nos données personnelles (ou privées, c’est selon comment qu’on aime dire, comme dirait l’autre). Et mon apprentissage a débuté avec la publication du livre de Tristan Nitot (ex directeur de Mozilla Europe, aujourd’hui C3PO : Cozy Cloud Chief Product Officer) sur &lt;a href=&quot;http://standblog.org/blog/serie/flicage-brouillon&quot;&gt;son blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Dans ce livre, Tristan Nitot nous explique qu’aujourd’hui le web tend à être centralisé. C’est à dire que de très (très) gros services comme Facebook, Dropbox, Skype et plein d’autres s’approprient les données de nombreux utilisateurs (un milliard pour Facebook, par exemple) et s’en servent pour proposer de la publicité ciblée à des annonceurs. Pour éviter celà, une méthode proposée est de créer son propre blog afin d’y poster ses humeurs, photos, vidéos et de l’auto-héberger. Je ne vais pas vous refaire tout le livre, filez plutôt le lire et profitez-en pour faire des commentaires qui permettront à Mr Nitot de l’améliorer encore.&lt;/p&gt;
&lt;p&gt;Face à tout ça, ma réaction n’a pas été de quitter Facebook. Bien qu’assez détâché de ce service, j’y accorde tout de même une certaine importance dans le sens où c’est mon seul moyen de communication avec certaines personnes. Ne parlons pas de Twitter, qui est mon moyen de veille technologique numéro 1. Non, face à tout ça, ma réaction a plutôt été de me dire “eh, tu as un blog, mais il est chez Tumblr, qui est un service participant à la centralisation d’Internet”. J’ai donc décidé de prendre les quelques articles que j’avais publié sur Tumblr, et de faire mon propre blog, auto-hébergé.&lt;/p&gt;
&lt;p&gt;Après quelques recherches, je me suis tourné vers &lt;a href=&quot;http://wintersmith.io/&quot;&gt;Wintersmith&lt;/a&gt; pour générer un site statique à partir de quelques fichiers Markdown. Ce système est vraiment pratique et convient parfaitement à mes besoins très simples.&lt;/p&gt;
&lt;p&gt;Tout était bon. Jusqu’à ce que je cherche à exporter mes articles Tumblr. Je vais la faire courte : je n’ai pas trouvé la fonctionnalité, et mes recherches n’ont pas donné de méthode simple pour exporter les articles d’un blog Tumblr. Typique d’un service qui cherche à enfermer ses utilisateurs. Je suis chanceux, mon blog, qui a bientôt un an, ne comporte que 5 articles. Les exporter à la main n’a donc pas été compliqué. Mais j’éprouve de la pitié pour ceux qui voudront fermer leur blog sur Tumblr pour en ouvrir un auto-hébergé, et qui auront des centaines d’articles à exporter. Ma mauvaise vision de ce service a donc été accrue avec cette expérience.&lt;/p&gt;
&lt;p&gt;Bref, depuis aujourd’hui mon blog m’appartient entièrement. On se sent quand même plus libre comme ça. J’invite tout le monde à faire de même.&lt;/p&gt;
&lt;p&gt;Bon, pour le moment mon hébergeur est Github, grâce à ses Github Pages. Mais ça ne saurait durer, je vais très rapidement mettre en place mon propre hébergement. Car Github &lt;a href=&quot;http://framablog.org/2015/03/13/google-code-ferme-ses-portes-nous-on-les-ouvre/&quot;&gt;est aussi un service participant à la centralisation du web&lt;/a&gt;. Toujours est-il que même si Github ferme ou si je décide de le quitter, il me suffira de mettre mon blog ailleurs pour qu’il soit toujours accessible. Ce qui n’était pas le cas de Tumblr. Bye bye Tumblr !&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Ne plus installer gulp en dépendance globale</title>
      <link>http://jesmodrazik.fr/articles/ne-plus-installer-gulp-en-dependance-globale/</link>
      <pubDate>Sun, 01 Mar 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://jesmodrazik.fr/articles/ne-plus-installer-gulp-en-dependance-globale/</guid>
      <author></author>
      <description>&lt;p&gt;Avec l’arrivée de Gulp 4 (actuellement 3.8.x), qui apporte des nouveautés et cassera potentiellement la compatibilité descendante (nouvelle version majeure), je me suis penché sur le problème que pose le fait d’utiliser Gulp via une installation locale (projet, gulpfile.js) + une installation globale (système, commande gulp).&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Si j’utilise Gulp 4 pour mes nouveaux projets pour profiter des nouveautés, alors je devrais mettre à jour mon installation globale. Sauf que par conséquent je risque de ne plus pouvoir l’utiliser sur mes projets anciens et actuels car ceux-ci seront toujours en 3.8.x. Je pourrais mettre à jour le gulp local à tous ces projets, mais ce serait galère. La meilleure solution serait d’avoir tout le temps la version globale de gulp correspondant à la version locale du projet sur lequel je bosse.&lt;/p&gt;
&lt;p&gt;Il est très simple de régler ce problème sur les systèmes Linux / UNIX. Il suffit de créer un alias sur &lt;code&gt;./node_modules/.bin/gulp&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Du côté de Windows, il va falloir ruser. Mais ça tombe bien, quand on installe localement un module qui a besoin d’une interface en ligne de commande, npm crée un dossier &lt;code&gt;.bin&lt;/code&gt; dans le dossier &lt;code&gt;node_modules&lt;/code&gt; et il met les exécutables correspondant dedans. On a donc accès à la commande &lt;code&gt;gulp&lt;/code&gt; sans l’installer en global.&lt;/p&gt;
&lt;p&gt;Pour lancer la tâche watch d’un projet, on peut faire ceci :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.\node_modules.bin\gulp watch
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;On peut aussi aller “plus loin” et utiliser les scripts NPM. NPM permet de définir des scripts qui peuvent être lancés en tapant :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm run nom_du_script
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Pour définir un script, il suffit d’ajouter un objet “scripts” dans le package.json. On peut donc faire ceci :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: {
    &lt;span class=&quot;string&quot;&gt;&quot;gulp&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;./node_modules/.bin/gulp&quot;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dans l’état c’est cool mais ça ne fait rien, il faudrait pouvoir lui passer la tâche qu’on veut exécuter en argument, ou alors définir un script par tâche :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: {
    &lt;span class=&quot;string&quot;&gt;&quot;gulp:watch&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;./node_modules/.bin/gulp watch&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;gulp:compile&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;./node_modules/.bin/gulp compile&quot;&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;// autres tâches…&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On pourrait donc faire :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm run gulp:watch
npm run gulp:compile
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Mais le mieux serait de pouvoir utiliser le script &lt;code&gt;gulp&lt;/code&gt; précédemment défini et lui passer en paramètre le nom de la tâche qu’on veut exécuter. C’est possible de faire ça, mais uniquement à partir de la version 2.0.0 de npm. Il faut donc mettre à jour notre npm si on est en 1.x.y (&lt;code&gt;npm -v&lt;/code&gt; pour vérifier) :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install npm -g
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;On peut maintenant faire ceci :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm run nom_du_script — arg1 arg2 &amp;quot;arg avec des espaces&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Et du coup on peut lancer une tâche gulp en spécifiant son nom comme ceci :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm run gulp -- watch
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Et si on tient absolument à avoir un script pour chaque tâche, on peut réutiliser le script “gulp” déjà écrit :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: {
    &lt;span class=&quot;string&quot;&gt;&quot;gulp&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;./node_modules/.bin/gulp&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;gulp:watch&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;npm run gulp — watch&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;gulp:compile&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;npm run gulp — compile&quot;&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;// autres tâches…&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oh, wait ! Il y a encore plus fort. Quand on lance un script avec &lt;code&gt;npm run&lt;/code&gt;, npm prend le dossier &lt;code&gt;node_modules/.bin&lt;/code&gt; et le met dans le PATH. On peut donc faire encore plus court :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: {
    &lt;span class=&quot;string&quot;&gt;&quot;gulp:watch&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;gulp watch&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;gulp:compile&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;gulp compile&quot;&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;// autres tâches…&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Voilà, de cette manière, on évite d’avoir une installation globale de gulp (et donc d’avoir à la maintenir à jour), et on a l’avantage de ne pas avoir à se soucier de la version de gulp utilisée pour chacun des projets. Ceci est bien entendu (théoriquement) valable pour toutes les dépendances globales.&lt;/p&gt;
&lt;p&gt;Il est aussi interressant de voir qu’avec ce systèmes de scripts npm, l’interêt des outils comme Gulp ou Grunt (pour ne citer qu’eux) devient limité. Des articles traitent très bien de ces sujets. Vous pouvez par exemple aller voir &lt;a href=&quot;http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/&quot;&gt;celui-ci&lt;/a&gt; de Keith Cirkel. Chacun se fera son propre avis !&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Sublime Text, un IDE à la carte ?</title>
      <link>http://jesmodrazik.fr/articles/sublime-text-ide-a-la-carte/</link>
      <pubDate>Tue, 23 Sep 2014 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://jesmodrazik.fr/articles/sublime-text-ide-a-la-carte/</guid>
      <author></author>
      <description>&lt;p&gt;Durant ma courte vie de développeur (ça fait “déjà” 4 ans pour de vrai, un peu plus pour rire), j’ai été amené à utiliser plusieurs éditeurs. J’ai commencé avec le bloc note de Windows parce que le tutoriel HTML/CSS du bon vieux Site du Zero disait que c’était suffisant même si il y avait mieux. Puis j’ai utilisé notepad++. Je développais dans mon coin et pas en pro donc ça m’a suffit pendant un bon bout de temps. Puis j’ai intégré une entreprise dans le cadre d’un contrat d’apprentissage. On m’a dit d’utiliser ce que je voulais, donc j’ai continué avec mon notepad++ (hey, c’est le truc le plus avancé que je connaissais!). Puis un jour j’ai découvert Sublime Text 2. C’était la mode, je me suis mis à l’utiliser, je l’ai trouvé plutôt cool. Puis mon maître d’apprentissage m’a suggéré d’utiliser Netbeans. Ce que j’ai fais 2/3 jours. Avant de revenir en courant vers Sublime Text. Dans mon entreprise actuelle, tout le monde utilise PhpStorm. J’ai essayé de faire comme tout le monde. Cette fois j’ai réussi presque 1 an… Avant de revenir en courant vers Sublime Text. Et ce pour plusieurs raisons.&lt;/p&gt;
&lt;h2 id=&quot;c-est-rapide&quot;&gt;C’est rapide&lt;/h2&gt;
&lt;p&gt;Je clique sur l’icône dans ma barre de tâches, ça s’ouvre, je peux bosser. Je n’attends pas plusieurs minutes qu’une usine se lance et analyse tout mon projet (encore?! tu l’as fais hier, avant hier, avant avant hier, la semaine dernière… Tu perds la mémoire?!) avant de me permettre de travailler.&lt;/p&gt;
&lt;h2 id=&quot;j-installe-uniquement-ce-dont-j-ai-besoin&quot;&gt;J’installe uniquement ce dont j’ai besoin&lt;/h2&gt;
&lt;p&gt;Ils permettent tous de faire ça, certes. Mais ils embarquent tous la terre entière par défaut (c’est surement pour ça qu’ils mettent de nombreuses minutes à s’ouvrir). Dans Sublime Text, si j’ai besoin d’intégrer Git, j’installe le plugin qui va bien et j’ai Git intégré à mon environnement de développement, basta. Dans PhpStorm, plusieurs systèmes de gestion de versions sont intégrés par défaut. Une entreprise n’en utilise généralement qu’un, pourquoi tout embarquer par défaut ?&lt;/p&gt;
&lt;p&gt;De plus, les plugins n’étant pas directement inclus et liés à l’éditeur, ils sont mis à jour indépendamment de celui-ci, et le merveilleux “Package Control” les met à jour automatiquement. D’autres sont obligés d’attendre qu’une nouvelle version de leur IDE préféré sorte pour une malheureuse fonctionnalité.&lt;/p&gt;
&lt;h2 id=&quot;je-partage-tr-s-simplement-ma-configuration-entre-mes-diff-rentes-machines&quot;&gt;Je partage très simplement ma configuration entre mes différentes machines&lt;/h2&gt;
&lt;p&gt;Quoi de plus agréable que d’avoir exactement le même environnement au travail que chez soi? Avec Sublime Text, j’initialise un repository git dans le dossier contenant les fichiers de configuration de mes différents packages, je le mets sur GitHub, je le récupère au boulot. Si je modifie ma configuration au boulot, je push sur GitHub et je récupère tout le soir en rentrant chez moi. Package Control s’occupe de récupérer les plugins que je n’ai pas sur telle ou telle machine, et même de récupérer des versions différentes en fonction du système d’exploitation si nécessaire.&lt;/p&gt;
&lt;h2 id=&quot;c-est-gratuit&quot;&gt;C’est gratuit&lt;/h2&gt;
&lt;p&gt;Sauf si on ne veut pas qu’une petite fenêtre apparaisse de temps en temps lorsqu’un sauvegarde un fichier. Dans ce cas c’est 70$.&lt;/p&gt;
&lt;p&gt;Pour tout ça, selon moi, Sublime Text n’a rien a envier à Eclipse, Netbeans et *Storm. Ceci dit, le principal est d’utiliser l’outil qu’on préfère. Moi, j’ai fais mon choix :)&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Je pense qu'il est impossible de respecter les maquettes</title>
      <link>http://jesmodrazik.fr/articles/je-pense-qu-il-est-impossible-de-respecter-les-maquettes/</link>
      <pubDate>Wed, 16 Apr 2014 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://jesmodrazik.fr/articles/je-pense-qu-il-est-impossible-de-respecter-les-maquettes/</guid>
      <author></author>
      <description>&lt;p&gt;Quand on fait une intégration, on se fie à une maquette. C’est cette image statique qu’il faut retranscrire afin qu’elle s’affiche et soit comprise par le navigateur web.&lt;/p&gt;
&lt;p&gt;Le problème principal est déjà posé. La maquette est statique. Alors que la page web est dynamique. Même si son contenu ne l’est pas, la page peut être affichée de différentes manières. Une maquette est faite dans une résolution bien précise. La fenêtre du navigateur peut être redimensionnée à souhait. Le problème est encore plus gros lorsqu’il y a des animations et/ou de l’interaction au sein de la (future) page.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;En effet, le designer a une idée. Il transpose cette idée en maquette, souvent en utilisant Photoshop ou assimilés. Il file ensuite cette maquette à l’intégrateur. Ici deux solutions :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;le designer et l’intégrateur peuvent discuter (sous entendu il n’y a pas 36 intermédiaires &lt;del&gt;inutiles, sauf à faire grimper la facture du client final&lt;/del&gt; entre eux). Le designer peut dire à l’intégrateur comment il voit la page vivre. L’intégrateur a alors une idée de ce qu’il y a à faire, et le sujet de la faisabilité peut être abordé&lt;/li&gt;
&lt;li&gt;le designer et l’intégrateur ne peuvent pas discuter &lt;del&gt;(saloperies d’intermédiaires)&lt;/del&gt;, ou très difficilement. L’intégrateur doit donc tout deviner. La probabilité que ce soit exactement ce à quoi le designer avait pensé? Quasi nulle. Dans le meilleur des cas ça s’en rapprochera. L’intégrateur n’est pas dans la tête du designer. Même si nous, les gens qui faisons de l’informatique, &lt;a href=&quot;https://www.youtube.com/watch?v=BKorP55Aqvg&quot;&gt;sommes d’obscurs magiciens&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aujourd’hui, les maquettes sont de plus en plus composées d’éléments complexes. Il y a du bord arrondis de partout, des transitions (quand le designer a pu nous le dire, donc)… Quoi? Les bords arrondis ne sont pas des éléments complexes? Vous dites? border-radius? Je réplique avec une compatibilité IE7+. Alors? Les bords arrondis sont bien des éléments complexes. Ce genre de chose qui &lt;a href=&quot;http://www.sitepoint.com/web-page-weight-2012/&quot;&gt;alourdis une page qui n’en a pas besoin&lt;/a&gt; avec des éléments HTML et des images supplémentaires, ou des hacks qui font du mal aux performances de ces vieux navigateurs (qui ne sont déjà pas bien élevées). A-t-on absolument besoin de bords arrondis pour ces navigateurs? Ajoutent-ils de la valeur à notre page? Sur un navigateur qui le permet facilement, certainement que oui. Sur un navigateur qui demande du travail supplémentaire qui provoquera une baisse de performances (et donc de confort d’utilisation), certainement que non.&lt;/p&gt;
&lt;p&gt;Mais le client a validé ces maquettes, et le designer (et peut être le chef de projet) lui a dit que c’était tout à fait possible de faire des bords arrondis sur IE7+, parce qu’il l’a déjà vu sur un autre site. Le client attend donc des bords arrondis sur IE7 lors de la livraison. Nouveau problème ici. Je pense qu’il manque une étape. La maquette ne devrait-elle pas être validée (sur le plan de la faisabilité) par l’intégrateur en premier lieu? Ne serait-ce que pour se mettre d’accord sur le discours à avoir face au client : “OK pour les bords arrondis, mais sous IE ça va pas être possible, sauf solutions de contournement qui feront à coup sûr ramer le site dans ce navigateur, et donc faire fuir vos clients potentiels qui l’utilisent”. Avec un tel discours (réaliste), les bords arrondis risqueraient d’avoir beaucoup moins d’importance aux yeux du client.&lt;/p&gt;
&lt;p&gt;Ajoutons à tout ça du responsive, une page un peu spéciale qui nécessite des positions absolues pour certains éléments, et on se retrouve presque en enfer.&lt;/p&gt;
&lt;p&gt;Alors, avec tout ça, qu’est-ce qu’on fait? On se contente de se plaindre, ou on propose quelques solutions?&lt;/p&gt;
&lt;p&gt;On va proposer des solutions. La plus évidente, avec ce discours, ce serait que le designer soit lui-même l’intégrateur. Ainsi, la vision dynamique qu’il a de sa maquette statique ne peut pas s’échapper de son cerveau entre la phase du design et celle de l’intégration, et le résultat final ne peut être qu’identique à cette vision.&lt;/p&gt;
&lt;p&gt;Une autre solution, comme je l’ai déjà évoqué, serait de discuter des maquettes entre designer et intégrateur avant de les proposer au client. Ça peut paraître bête (c’est surtout de ne pas le faire qui l’est, mais bon…), mais nombre de soucis pourraient être évités, tout en gardant une certaine qualité pour les maquettes.&lt;/p&gt;
&lt;p&gt;Dernière solution. Celle qui rendraient les choses parfaites selon moi. Ne plus faire de maquettes avec Photoshop. Oh bah comment qu’on fait alors? Le client il valide quoi? Ben le client, il valide une idée générale de la page, et des &lt;a href=&quot;http://letrainde13h37.fr/4/style-tiles-nouvel-outil-pour-webdesigner/&quot;&gt;style tiles&lt;/a&gt; par exemple. De cette manière, il n’a pas une image fixe de sa page, mais se la représente tout de même. Ça fonctionne, la preuve : &lt;a href=&quot;http://www.inpixelitrust.fr/portfolio/pandasuite-site-vitrine/&quot;&gt;Pandasuite, le site vitrine&lt;/a&gt; (Stéphanie Walter). Je suppose qu’il faut tout de même avoir affaire à un client à l’esprit ouvert.&lt;/p&gt;
&lt;p&gt;Je débute dans le domaine de l’intégration. J’ai peut être dis des conneries. Mais c’est comme ça que je ressens les choses. Je suis frustré, parce que je devrais respecter des maquettes, mais que je pense que c’est impossible.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>J'ai eu besoin de connaître la date de pâques chaque année jusqu'à l'infini et au-delà</title>
      <link>http://jesmodrazik.fr/articles/calculer-date-paques-php/</link>
      <pubDate>Tue, 01 Apr 2014 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://jesmodrazik.fr/articles/calculer-date-paques-php/</guid>
      <author></author>
      <description>&lt;p&gt;Pour un projet de gestion de demandes de congés, j’ai eu besoin de connaître les dates de chaque jour férié (sauf le lundi de Pentecôte puisqu’il est maintenant ouvré).&lt;/p&gt;
&lt;p&gt;Facile, certains sont fixes. D’autres sont fonction de Pâques, qui est lui même variable. Ambiance.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Je me renseigne donc sur Pâques, et me retrouve rapidement sur &lt;a href=&quot;http://fr.wikipedia.org/wiki/Calcul_de_la_date_de_P%C3%A2ques&quot;&gt;ce genre de page wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Puisque des algorithmes existent, je me dis que ça a bien du être implémenté, que ce soit dans la SPL ou par n’importe qui d’autre. Après un petit coup de google, me voici sur la documentation de &lt;a href=&quot;http://php.net/manual/fr/function.easter-date.php&quot;&gt;la fonction PHP &lt;code&gt;easter_date()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ça a l’air satisfaisant. Pourtant en lisant l’avertissement présent sur la page, je me rend compte que ça ne va pas aller. Certes 2037 c’est loin, tout aura changé d’ici là, mais pour le principe, je veux que ça marche tout le temps.&lt;/p&gt;
&lt;p&gt;Un peu plus bas sur la même page, une note nous dit que &lt;code&gt;easter_date()&lt;/code&gt; ne se base pas sur le fuseau horaire par défaut de PHP mais celui du système. Encore un mauvais point. Cette fois par contre la doc propose une solution à ce problème, et au précédent par la même occasion : utiliser &lt;a href=&quot;http://www.php.net/manual/fr/function.easter-days.php&quot;&gt;la fonction &lt;code&gt;easter_days()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Puisqu’on sait que Pâques tombe entre le 21 mars et le 25 avril, alors il suffit de prendre comme base le 21 mars et y ajouter le résultat de &lt;code&gt;easter_days()&lt;/code&gt; pour l’année voulue. C’est partit. On va faire une petite méthode qui renvoie un tableau de DateTime représentant les jours fériés pour l’année passée en paramètre.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-php&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**
 * &lt;span class=&quot;doctag&quot;&gt;@brief&lt;/span&gt; Retourne le tableau des jours fériés (DateTime)
 * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; $year
 * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; array
 */&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getHolidays&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;($year)&lt;/span&gt;
&lt;/span&gt;{
    $holidays = &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;();

    &lt;span class=&quot;comment&quot;&gt;// Fixed holidays&lt;/span&gt;
    $fixedDates = &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'01-01'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'05-01'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'05-08'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'07-14'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'08-15'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'11-01'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'11-11'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'12-25'&lt;/span&gt;);

    &lt;span class=&quot;keyword&quot;&gt;foreach&lt;/span&gt; ($fixedDates &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; $date)
    {
        $holidays[] = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DateTime($year . &lt;span class=&quot;string&quot;&gt;'-'&lt;/span&gt; . $date);
    }

    &lt;span class=&quot;comment&quot;&gt;// Variables holidays, depending on easter&lt;/span&gt;
    $easter = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DateTime($year . &lt;span class=&quot;string&quot;&gt;'-03-21'&lt;/span&gt;);
    $nbDays = easter_days($year);
    $easter-&amp;gt;add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DateInterval(&lt;span class=&quot;string&quot;&gt;'P'&lt;/span&gt; . $nbDays . &lt;span class=&quot;string&quot;&gt;'D'&lt;/span&gt;));
    $holidays[] = &lt;span class=&quot;keyword&quot;&gt;clone&lt;/span&gt; $easter;

    $easterMonday = &lt;span class=&quot;keyword&quot;&gt;clone&lt;/span&gt; $easter;
    $easterMonday-&amp;gt;add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DateInterval(&lt;span class=&quot;string&quot;&gt;'P1D'&lt;/span&gt;));
    $holidays[] = $easterMonday;

    $easterThursday = &lt;span class=&quot;keyword&quot;&gt;clone&lt;/span&gt; $easter;
    $easterThursday-&amp;gt;add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DateInterval(&lt;span class=&quot;string&quot;&gt;'P39D'&lt;/span&gt;));
    $holidays[] = $easterThursday;

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; $holidays;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On peut maintenant faire une méthode qui prend en paramètre un DateTime et qui nous dit si celui-ci est un jour férié ou non :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-php&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**
 * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; DateTime $date
 * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; bool
 */&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isHoliday&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(\DateTime $date)&lt;/span&gt;
&lt;/span&gt;{
    $year = intval($date-&amp;gt;format(&lt;span class=&quot;string&quot;&gt;'Y'&lt;/span&gt;));
    $holidays = &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;getHolidays($year);

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; in_array($date, $holidays);
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>J'ai eu besoin d'un accès distant à mon serveur MySQL</title>
      <link>http://jesmodrazik.fr/articles/acces-distant-serveur-mysql/</link>
      <pubDate>Sun, 16 Mar 2014 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://jesmodrazik.fr/articles/acces-distant-serveur-mysql/</guid>
      <author></author>
      <description>&lt;p&gt;Pour un projet universitaire (une plateforme collaborative de développement R), j’ai eu besoin d’une base de données. J’ai pas cherché midi à quatorze heures, j’ai choisi MySQL. Mais quelle fût ma surprise lorsque j’ai constaté que je ne pouvais pas m’y connecter à partir de ma machine mais uniquement à partir de celle sur laquelle MySQL tournait.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Bon d’abord, on va commencer par installer MySQL :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt-get mysql-server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Il nous demande le mot de passe root. Nous voilà avec un MySQL et un utilisateur root.&lt;/p&gt;
&lt;p&gt;Maintenant j’aimerais utiliser HeidiSQL pour gérer mes bases. Allez soyons fous, on entre l’ip de notre serveur, root et notre mot de passe dans HeidiSQL. Et là… Oh la grosse erreur ! Eh ouais, MySQL n’autorise que les connexions locales par défaut. Et ne donne des droits aux utilisateur que s’ils se connectent en local. Bon, on va changer tout ça.&lt;/p&gt;
&lt;p&gt;On va d’abord donner tous les droits sur toutes les bases à notre utilisateur root (en vrai il faudrait ne surtout pas toucher à root, mais plutôt créer un autre utilisateur à qui on restreint les droits, etc… J’ai la flemme, on verra plus tard) :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-sql&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;GRANT&lt;/span&gt; ALL &lt;span class=&quot;keyword&quot;&gt;PRIVILEGES&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;ON&lt;/span&gt; *.* &lt;span class=&quot;keyword&quot;&gt;TO&lt;/span&gt; ‘root’@’%’ &lt;span class=&quot;keyword&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; ‘UnMDPSuperSecret’;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;EDIT : un &lt;a href=&quot;http://blog.emmanuelgautier.fr/utilisateurs-et-privileges-sous-mysql.html&quot;&gt;très bon article&lt;/a&gt; d’Emmanuel Gautier explique comment gérer les droits sous MySQL. Je vous invite à y jetter un oeil pour gérer les droits proprement sur votre serveur.&lt;/p&gt;
&lt;p&gt;Explications. &lt;code&gt;GRANT ALL PRIVILEGES&lt;/code&gt;, ça veut dire ce que ça veut dire. &lt;code&gt;ON *.*&lt;/code&gt;, ça veut dire sur toutes les bases et toutes les tables qui composent ces bases. &lt;code&gt;TO &amp;#39;root&amp;#39;@&amp;#39;%&amp;#39;&lt;/code&gt;, ça veut dire à l’utilisateur root peu importe l’IP avec laquelle il se connecte. Et &lt;code&gt;IDENTIFIED BY &amp;#39;...&amp;#39;&lt;/code&gt;, c’est le mot de passe de root.&lt;/p&gt;
&lt;p&gt;Pour que MySQL prenne ceci en compte, il faut “flusher” les privileges :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-sql&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FLUSH&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;PRIVILEGES&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Une fois ceci fait, on va dire à MySQL de ne plus écouter les connexions uniquement sur 127.0.0.1 :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vi /etc/mysql/my.cnf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;On commente la ligne &lt;code&gt;bind-address = 127.0.0.1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Et on redémarre MySQL :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/etc/init.d/mysql restart
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Et voilà, comme dirait l’autre.&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>
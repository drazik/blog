{"filename":"index.md","title":"Veille de la semaine - 05/02/2016","date":"2016-02-05","body":{"t":"div","c":[{"t":"p","c":["Cette semaine beaucoup de Javascript. Le draft de la prochaine specification\nES2016 (ES7), la première RC d'ESLint 2.0.0 et d'autres choses !"]},"\n",{"t":"p","c":[{"t":"span","p":{"className":"more"}}]},"\n",{"t":"p","c":[{"t":"a","p":{"href":"http://eslint.org/blog/2016/02/eslint-v2.0.0-rc.0-released"},"c":["ESLint v2.0.0-rc.0\nreleased"]}," : la\nprochaine version majeure d'ESLint est en Release Candidate. Cette version\napporte des nouveautés telles que la configuration automatique (en analysant\nvotre code actuel pour en ressortir les patterns les plus récurrents), le code\npath analysis sur lequel les règles pourront s'appuyer pour mieux analyser\nnotre code, ou encore une meilleure gestion des différentes versions\nd'ECMAScript et des variables globales associées. Une très bonne évolution qui\nne devrait plus tarder à être stable."]},"\n",{"t":"p","c":[{"t":"a","p":{"href":"http://featurejs.com/"},"c":["Feature.js"]}," : une bibliothèque de features detection\nqui tient dans 1kb et qui permet de tester l'existence de 27 API."]},"\n",{"t":"p","c":[{"t":"a","p":{"href":"https://tc39.github.io/ecma262/"},"c":["Draft spec ECMAScript 2016"]}," : le draft de la\nprochaine spécification d'ECMAScript, ES2016 (aussi appelée ES7). Un gros pavé\nà parcourir pour avoir un aperçu des nouveautés. Ou à lire entièrement avec une\nbonne aspirine pour connaître tout le détail."]},"\n",{"t":"p","c":[{"t":"a","p":{"href":"http://www.capitalone.io/blog/why-is-everyone-talking-about-isomorphic-javascript/"},"c":["Why Everyone is Talking About Isomorphic / Universal JavaScript and Why it\nMatters"]},"\n: on parle de plus en plus de JS isomorphique / universel, c'est à dire d'un\nmême code JS qu'il est possible d'exécuter à la fois côté client et côté\nserveur. Les raisons sont multiples : une meilleure gestion des moteurs de\nrecherche, de meilleures performances au chargement, une seule base de code à\nmaintenir..."]},"\n",{"t":"p","c":[{"t":"a","p":{"href":"https://24ways.org/2015/how-tabs-should-work/"},"c":["How Tabs Should Work"]}," : les\nonglets sont des éléments d'interface relativement simples, si on s'arrête à\nleur fonctionnement basique (je clique sur l'onglet, le contenu associé\ns'affiche, les autres sont cachés). Pourtant, pour que ceux-ci soient\naccessibles et réellement utilisables, de nombreux aspects sont à prendre en\ncompte : faire pointer l'URL sur l'élément affiché, initialiser correctement\nl'élément affiche en fonction de l'URL, gérer le shit-click et le clic droit,\najouter des rôles ARIA..."]},"\n",{"t":"p","c":[{"t":"a","p":{"href":"http://kyusuf.com/post/completely-css-custom-checkbox-radio-buttons-and-select-boxes"},"c":["Completely CSS: Custom checkboxes, radio buttons and select\nboxes"]},"\n: on finit avec des composants de formulaires custom uniquement avec du CSS.\nNous savons bien qu'utiliser du JS pour arriver à ce résultat est une plaie, et\nque ça ne fonctionne jamais complètement (niveau accessibilité surtout). Avec\nces techniques CSS on garde tous les comportements présents nativement, on ne\nfait que modifier le style."]}]}}